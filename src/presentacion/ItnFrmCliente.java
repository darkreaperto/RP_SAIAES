/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import controladores.CtrAcceso;
import controladores.CtrCliente;
import controladores.CtrDireccion;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import logica.negocio.Cliente;
import logica.negocio.Contacto;
import logica.negocio.Direccion;
import logica.servicios.Mensaje;
import logica.servicios.Regex;
import logica.servicios.DirFiltro;
import logica.servicios.Logger;
import logica.servicios.UI;
import util.Estado;
import util.TextPrompt;
import util.TipoCedula;
import util.TipoContacto;
import util.TipoMensaje;

/**
 * Inicializa la ventana que contiene la información de los clientes.
 * @author ahoihanabi
 */
public final class ItnFrmCliente extends javax.swing.JInternalFrame {
    
    private static ItnFrmCliente instancia = null;
    private static CtrCliente controlador;
    private static CtrDireccion ctrDireccion;
    private static CtrAcceso sesion;
    private static Mensaje msg;
    private static ArrayList<Cliente> clientes;
    private static ArrayList<String> crearTelefonos;
    private static ArrayList<String> crearCorreos;
    private static ArrayList<Contacto> editarTelefonos;
    private static ArrayList<Contacto> editarCorreos;
    private static DefaultTableModel model;
    private final Regex verificacion;
    /** Instancia de la clase UI. */
    private final UI estilo;
    private TextPrompt placeholder;
    
    /**
     * Instancia un nuevo formulario interno de clientes.
     * @param sesionAcc Usuario en sesión actual 
     * @param clientes Lista con los clientes en la base de datos
     */
    protected ItnFrmCliente(CtrAcceso sesionAcc, ArrayList<Cliente> clientes) {
        initComponents();
        //Inicializar variables
        controlador = CtrCliente.getInstancia();
        ctrDireccion = CtrDireccion.getInstancia();
        
        ItnFrmCliente.clientes = clientes;
        ItnFrmCliente.sesion = sesionAcc;
        crearCorreos = new ArrayList<>();
        crearTelefonos = new ArrayList<>();
        verificacion = new Regex();
        msg = new Mensaje();
        estilo = new UI();
        //Estilizar interfaz
        estilo.estilizarTablas(tbListadoCliente);
        estilo.estilizarTablas(tbl_crear);
        estilo.estilizarTablas(tbl_editar);
        estilo.estilizarTablas(tblClientesActivos);
        estilo.estilizarTablas(tblClientesInactivos);
        
        cargarTablas();
        cargarDirJCombo("P", "", "", "", cbxProvincia);
        pnlEditarDireccion.setVisible(false);
        pnlCrearDireccion.setVisible(false);
    }
    
    /**
     * Retorna la única instancia de la clase.
     * @param sesionAcc Usuario en sesión actual.
     * @param clientes Lista de clientes en la base de datos.
     * @return instancia.
     */
    public static ItnFrmCliente getInstancia(CtrAcceso sesionAcc,
            ArrayList<Cliente> clientes) {
        if (instancia == null) {
            instancia = new ItnFrmCliente(sesionAcc, clientes);
        }
        return instancia;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_crearCredito = new javax.swing.ButtonGroup();
        bg_crearHabilitar = new javax.swing.ButtonGroup();
        bg_editarCredito = new javax.swing.ButtonGroup();
        pmnMenuEmergente = new javax.swing.JPopupMenu();
        itEditar = new javax.swing.JMenuItem();
        pnl_modCliente = new javax.swing.JPanel();
        tb_modCliente = new javax.swing.JTabbedPane();
        pnl_listado = new javax.swing.JPanel();
        lblListadoCliente = new javax.swing.JLabel();
        txtListadoCliente = new javax.swing.JTextField();
        scpnlTblListadoCliente = new javax.swing.JScrollPane();
        tbListadoCliente = new javax.swing.JTable();
        pnl_agregar = new javax.swing.JPanel();
        pnlCrearContactoCliente = new javax.swing.JPanel();
        tbCrearContactoClientes = new javax.swing.JTabbedPane();
        pnlCrearCorreo1 = new javax.swing.JPanel();
        txt_agregarCorreo = new javax.swing.JTextField();
        btnAgregarCorreo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsCrearCorreos = new javax.swing.JList<>();
        scpnlClientesCrearTelefono = new javax.swing.JScrollPane();
        pnlCrearTelefono = new javax.swing.JPanel();
        txt_agregarTelefono = new javax.swing.JTextField();
        btnAgregarTelefono = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsCrearTelefonos = new javax.swing.JList<>();
        spnl_crear_clientes = new javax.swing.JScrollPane();
        tbl_crear = new javax.swing.JTable();
        btnCrearCliente = new javax.swing.JButton();
        pnlCrearInfoBase = new javax.swing.JPanel();
        lbl_crear_cedulaCliente = new javax.swing.JLabel();
        lbl_crear_nombreCliente = new javax.swing.JLabel();
        txt_crear_nombreCliente = new javax.swing.JTextField();
        ckbAgregarDireccion = new javax.swing.JCheckBox();
        lblCrearTipoCedula = new javax.swing.JLabel();
        cbxCrearTipoCedula = new javax.swing.JComboBox<>();
        ft_crear_cedulaCliente = new javax.swing.JFormattedTextField();
        pnlCrearDireccion = new javax.swing.JPanel();
        lbl_crear_provincia = new javax.swing.JLabel();
        cbxProvincia = new javax.swing.JComboBox<>();
        lbl_crear_canton = new javax.swing.JLabel();
        cbxCanton = new javax.swing.JComboBox<>();
        lbl_crear_distrito = new javax.swing.JLabel();
        lbl_crear_barrio = new javax.swing.JLabel();
        cbxDistrito = new javax.swing.JComboBox<>();
        cbxBarrio = new javax.swing.JComboBox<>();
        lbl_crear_barrio1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaOtrasSenas = new javax.swing.JTextArea();
        pnl_crear_creditoCliente = new javax.swing.JPanel();
        rbCrearCreditoLim = new javax.swing.JRadioButton();
        rbCrearCredito = new javax.swing.JRadioButton();
        rbCrearSinCredito = new javax.swing.JRadioButton();
        txt_crear_limiteCliente = new javax.swing.JTextField();
        pnl_actualizar = new javax.swing.JPanel();
        spnl_editar_clientes = new javax.swing.JScrollPane();
        tbl_editar = new javax.swing.JTable();
        btnEditarCliente = new javax.swing.JButton();
        tbEditarContactoClientes = new javax.swing.JTabbedPane();
        scpnlClientesEditarCliente = new javax.swing.JScrollPane();
        pnlEditarTelefono = new javax.swing.JPanel();
        pnlEditarCreditoCliente = new javax.swing.JPanel();
        rbEditarCreditoLim = new javax.swing.JRadioButton();
        rbEditarCredito = new javax.swing.JRadioButton();
        rbEditarSinCredito = new javax.swing.JRadioButton();
        txtEditarLimiteCliente = new javax.swing.JTextField();
        pnlInfoBasica = new javax.swing.JPanel();
        lblEditarCedulaCliente = new javax.swing.JLabel();
        txtEditarCedulaCliente = new javax.swing.JTextField();
        lblEditarNombreCliente = new javax.swing.JLabel();
        txtEditarNombreCliente = new javax.swing.JTextField();
        ckbEditarDireccion = new javax.swing.JCheckBox();
        pnlEditarDireccion = new javax.swing.JPanel();
        lblEditarBarrio = new javax.swing.JLabel();
        cbxEditarBarrio = new javax.swing.JComboBox<>();
        cbxEditarDistrito = new javax.swing.JComboBox<>();
        lblEditarDistrito = new javax.swing.JLabel();
        lblEditarCanton = new javax.swing.JLabel();
        cbxEditarCanton = new javax.swing.JComboBox<>();
        cbxEditarProvincia = new javax.swing.JComboBox<>();
        lblEditarProvincia = new javax.swing.JLabel();
        txaEditarOtrasSenas = new javax.swing.JTextArea();
        lblEditarOtrasSenas = new javax.swing.JLabel();
        scpnlClientesEditarContacto = new javax.swing.JScrollPane();
        pnlEditarCorreo = new javax.swing.JPanel();
        pnlEditarContactoCliente = new javax.swing.JPanel();
        lblEditarTelefono = new javax.swing.JLabel();
        lblEditarCorreo = new javax.swing.JLabel();
        btnEditarGuardarTel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        scpnlEditarListaTelef = new javax.swing.JScrollPane();
        lsTelefonos = new javax.swing.JList<>();
        txtEditarTelefono = new javax.swing.JTextField();
        btnEditarCancelTel = new javax.swing.JButton();
        scpnlEditarListaCorreo = new javax.swing.JScrollPane();
        lsCorreos = new javax.swing.JList<>();
        txtEditarCorreoCliente = new javax.swing.JTextField();
        btnEditarGuardarCorreo = new javax.swing.JButton();
        btnEditarCancelCorreo = new javax.swing.JButton();
        pnlHabilitar = new javax.swing.JPanel();
        lblDeshabSelectCliente = new javax.swing.JLabel();
        tbDeshab = new javax.swing.JTabbedPane();
        scpnlClientesDeshab = new javax.swing.JScrollPane();
        tblClientesActivos = new javax.swing.JTable();
        scpnlClientesHabilitar = new javax.swing.JScrollPane();
        tblClientesInactivos = new javax.swing.JTable();
        pnlDeshabContainer = new javax.swing.JPanel();
        rbDeshabDeshabCliente = new javax.swing.JRadioButton();
        rbDeshabHabilitarCliente = new javax.swing.JRadioButton();
        btn_deshabilitar = new javax.swing.JButton();

        itEditar.setText("Editar");
        itEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itEditarActionPerformed(evt);
            }
        });
        pmnMenuEmergente.add(itEditar);

        setClosable(true);
        setIconifiable(true);
        setTitle("Módulo de Clientes");
        setPreferredSize(new java.awt.Dimension(1240, 670));

        tb_modCliente.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        lblListadoCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblListadoCliente.setText("Buscar cliente: ");

        txtListadoCliente.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtListadoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtListadoClienteKeyReleased(evt);
            }
        });

        tbListadoCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "T. Cédula", "Nombre", "Crédito", "Límite de crédito", "Contactos", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbListadoCliente.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbListadoCliente.setComponentPopupMenu(pmnMenuEmergente);
        tbListadoCliente.setRowHeight(20);
        tbListadoCliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbListadoCliente.getTableHeader().setReorderingAllowed(false);
        scpnlTblListadoCliente.setViewportView(tbListadoCliente);

        javax.swing.GroupLayout pnl_listadoLayout = new javax.swing.GroupLayout(pnl_listado);
        pnl_listado.setLayout(pnl_listadoLayout);
        pnl_listadoLayout.setHorizontalGroup(
            pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnl_listadoLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpnlTblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_listadoLayout.createSequentialGroup()
                        .addComponent(lblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        pnl_listadoLayout.setVerticalGroup(
            pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_listadoLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtListadoCliente)
                    .addComponent(lblListadoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(scpnlTblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tb_modCliente.addTab("Listado Clientes", pnl_listado);

        pnl_agregar.setLayout(null);

        pnlCrearContactoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contacto:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N
        pnlCrearContactoCliente.setAutoscrolls(true);

        tbCrearContactoClientes.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tbCrearContactoClientes.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        placeholder = new TextPrompt("Correo Electrónico", txt_agregarCorreo);
        placeholder.changeAlpha(0.75f);
        placeholder.changeStyle(Font.ITALIC);

        btnAgregarCorreo.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        btnAgregarCorreo.setText("+");
        btnAgregarCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCorreoActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsCrearCorreos);

        javax.swing.GroupLayout pnlCrearCorreo1Layout = new javax.swing.GroupLayout(pnlCrearCorreo1);
        pnlCrearCorreo1.setLayout(pnlCrearCorreo1Layout);
        pnlCrearCorreo1Layout.setHorizontalGroup(
            pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                        .addComponent(txt_agregarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlCrearCorreo1Layout.setVerticalGroup(
            pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_agregarCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnAgregarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbCrearContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/email.png")), pnlCrearCorreo1); // NOI18N

        scpnlClientesCrearTelefono.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlCrearTelefono.setRequestFocusEnabled(false);

        placeholder = new TextPrompt("Número telefónico", txt_agregarTelefono);
        placeholder.changeAlpha(0.75f);
        placeholder.changeStyle(Font.ITALIC);

        btnAgregarTelefono.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        btnAgregarTelefono.setText("+");
        btnAgregarTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTelefonoActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lsCrearTelefonos);

        javax.swing.GroupLayout pnlCrearTelefonoLayout = new javax.swing.GroupLayout(pnlCrearTelefono);
        pnlCrearTelefono.setLayout(pnlCrearTelefonoLayout);
        pnlCrearTelefonoLayout.setHorizontalGroup(
            pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                        .addComponent(txt_agregarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarTelefono)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        pnlCrearTelefonoLayout.setVerticalGroup(
            pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_agregarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );

        scpnlClientesCrearTelefono.setViewportView(pnlCrearTelefono);

        tbCrearContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/telefono.png")), scpnlClientesCrearTelefono); // NOI18N

        javax.swing.GroupLayout pnlCrearContactoClienteLayout = new javax.swing.GroupLayout(pnlCrearContactoCliente);
        pnlCrearContactoCliente.setLayout(pnlCrearContactoClienteLayout);
        pnlCrearContactoClienteLayout.setHorizontalGroup(
            pnlCrearContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearContactoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbCrearContactoClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlCrearContactoClienteLayout.setVerticalGroup(
            pnlCrearContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbCrearContactoClientes)
        );

        pnl_agregar.add(pnlCrearContactoCliente);
        pnlCrearContactoCliente.setBounds(435, 124, 371, 156);

        tbl_crear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "T. Cédula", "Nombre", "Crédito", "Límite de Crédito", "Contactos", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_crear.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl_crear.getTableHeader().setReorderingAllowed(false);
        spnl_crear_clientes.setViewportView(tbl_crear);

        pnl_agregar.add(spnl_crear_clientes);
        spnl_crear_clientes.setBounds(12, 288, 1170, 250);

        btnCrearCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        btnCrearCliente.setText("Crear Cliente");
        btnCrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearClienteActionPerformed(evt);
            }
        });
        pnl_agregar.add(btnCrearCliente);
        btnCrearCliente.setBounds(990, 540, 195, 35);

        pnlCrearInfoBase.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información Básica:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        lbl_crear_cedulaCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_cedulaCliente.setText("Cédula:");

        lbl_crear_nombreCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_nombreCliente.setText("Nombre:");

        ckbAgregarDireccion.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        ckbAgregarDireccion.setText("Agregar dirección");
        ckbAgregarDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbAgregarDireccionActionPerformed(evt);
            }
        });

        lblCrearTipoCedula.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblCrearTipoCedula.setText("Tipo de cédula:");

        cbxCrearTipoCedula.setModel(new javax.swing.DefaultComboBoxModel<>( TipoCedula.getValues() ));
        cbxCrearTipoCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCrearTipoCedulaActionPerformed(evt);
            }
        });

        try {
            javax.swing.text.MaskFormatter formatter = new javax.swing.text.MaskFormatter("#-####-####");
            formatter.setPlaceholderCharacter('_');
            ft_crear_cedulaCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(formatter));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout pnlCrearInfoBaseLayout = new javax.swing.GroupLayout(pnlCrearInfoBase);
        pnlCrearInfoBase.setLayout(pnlCrearInfoBaseLayout);
        pnlCrearInfoBaseLayout.setHorizontalGroup(
            pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearInfoBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCrearInfoBaseLayout.createSequentialGroup()
                        .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_crear_nombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_crear_cedulaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCrearTipoCedula, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ft_crear_cedulaCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbxCrearTipoCedula, javax.swing.GroupLayout.Alignment.TRAILING, 0, 210, Short.MAX_VALUE)
                            .addComponent(txt_crear_nombreCliente)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearInfoBaseLayout.createSequentialGroup()
                        .addGap(0, 175, Short.MAX_VALUE)
                        .addComponent(ckbAgregarDireccion)))
                .addContainerGap())
        );
        pnlCrearInfoBaseLayout.setVerticalGroup(
            pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearInfoBaseLayout.createSequentialGroup()
                .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCrearTipoCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxCrearTipoCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ft_crear_cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_crear_cedulaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(pnlCrearInfoBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCrearInfoBaseLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_crear_nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCrearInfoBaseLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lbl_crear_nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(85, 85, 85)
                .addComponent(ckbAgregarDireccion)
                .addContainerGap())
        );

        pnl_agregar.add(pnlCrearInfoBase);
        pnlCrearInfoBase.setBounds(12, 13, 388, 267);

        pnlCrearDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dirección:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        lbl_crear_provincia.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_provincia.setText("Provincia:");

        cbxProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProvinciaActionPerformed(evt);
            }
        });

        lbl_crear_canton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_canton.setText("Cantón:");

        cbxCanton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCantonActionPerformed(evt);
            }
        });

        lbl_crear_distrito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_distrito.setText("Distrito:");

        lbl_crear_barrio.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_barrio.setText("Barrio:");

        cbxDistrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDistritoActionPerformed(evt);
            }
        });

        lbl_crear_barrio1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lbl_crear_barrio1.setText("Otras señas:");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setAutoscrolls(true);

        txtaOtrasSenas.setColumns(3);
        txtaOtrasSenas.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtaOtrasSenas.setLineWrap(true);
        txtaOtrasSenas.setRows(3);
        txtaOtrasSenas.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtaOtrasSenas);

        javax.swing.GroupLayout pnlCrearDireccionLayout = new javax.swing.GroupLayout(pnlCrearDireccion);
        pnlCrearDireccion.setLayout(pnlCrearDireccionLayout);
        pnlCrearDireccionLayout.setHorizontalGroup(
            pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                        .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCrearDireccionLayout.createSequentialGroup()
                                .addComponent(lbl_crear_barrio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxBarrio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                                .addComponent(lbl_crear_canton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                                .addComponent(lbl_crear_provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCrearDireccionLayout.createSequentialGroup()
                                .addComponent(lbl_crear_distrito, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxDistrito, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                        .addComponent(lbl_crear_barrio1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlCrearDireccionLayout.setVerticalGroup(
            pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearDireccionLayout.createSequentialGroup()
                .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_crear_provincia, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(cbxProvincia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_crear_canton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_crear_distrito, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCrearDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxBarrio)
                    .addComponent(lbl_crear_barrio, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_crear_barrio1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pnl_agregar.add(pnlCrearDireccion);
        pnlCrearDireccion.setBounds(841, 13, 341, 268);

        pnl_crear_creditoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Crédito de Cliente:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        bg_crearCredito.add(rbCrearCreditoLim);
        rbCrearCreditoLim.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbCrearCreditoLim.setText("Crédito limitado");
        rbCrearCreditoLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearCreditoLimActionPerformed(evt);
            }
        });

        bg_crearCredito.add(rbCrearCredito);
        rbCrearCredito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbCrearCredito.setText("Crédito");
        rbCrearCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearCreditoActionPerformed(evt);
            }
        });

        bg_crearCredito.add(rbCrearSinCredito);
        rbCrearSinCredito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbCrearSinCredito.setSelected(true);
        rbCrearSinCredito.setText("Sin crédito");
        rbCrearSinCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearSinCreditoActionPerformed(evt);
            }
        });

        placeholder = new TextPrompt("Límite de crédito", txt_crear_limiteCliente);
        placeholder.changeAlpha(0.75f);
        placeholder.changeStyle(Font.ITALIC);
        txt_crear_limiteCliente.setEditable(false);

        javax.swing.GroupLayout pnl_crear_creditoClienteLayout = new javax.swing.GroupLayout(pnl_crear_creditoCliente);
        pnl_crear_creditoCliente.setLayout(pnl_crear_creditoClienteLayout);
        pnl_crear_creditoClienteLayout.setHorizontalGroup(
            pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_crear_creditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbCrearSinCredito)
                    .addComponent(rbCrearCredito))
                .addGap(36, 36, 36)
                .addGroup(pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbCrearCreditoLim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_crear_limiteCliente))
                .addGap(0, 31, Short.MAX_VALUE))
        );
        pnl_crear_creditoClienteLayout.setVerticalGroup(
            pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_crear_creditoClienteLayout.createSequentialGroup()
                .addGroup(pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCrearCredito)
                    .addComponent(rbCrearCreditoLim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbCrearSinCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txt_crear_limiteCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_agregar.add(pnl_crear_creditoCliente);
        pnl_crear_creditoCliente.setBounds(435, 13, 371, 104);

        tb_modCliente.addTab("Agregar cliente", pnl_agregar);

        tbl_editar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "T. Cédula", "Nombre", "Crédito", "Límite de Crédito", "Contactos", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_editar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl_editar.getTableHeader().setReorderingAllowed(false);
        tbl_editar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_editarMouseClicked(evt);
            }
        });
        tbl_editar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_editarKeyReleased(evt);
            }
        });
        spnl_editar_clientes.setViewportView(tbl_editar);

        btnEditarCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        btnEditarCliente.setText("Guardar Cambios");
        btnEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarClienteActionPerformed(evt);
            }
        });

        tbEditarContactoClientes.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tbEditarContactoClientes.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        scpnlClientesEditarCliente.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlEditarTelefono.setRequestFocusEnabled(false);
        pnlEditarTelefono.setLayout(null);

        pnlEditarCreditoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Crédito de Cliente:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N
        pnlEditarCreditoCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N

        bg_editarCredito.add(rbEditarCreditoLim);
        rbEditarCreditoLim.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbEditarCreditoLim.setText("Crédito limitado");
        rbEditarCreditoLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarCreditoLimActionPerformed(evt);
            }
        });

        bg_editarCredito.add(rbEditarCredito);
        rbEditarCredito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbEditarCredito.setText("Crédito");
        rbEditarCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarCreditoActionPerformed(evt);
            }
        });

        bg_editarCredito.add(rbEditarSinCredito);
        rbEditarSinCredito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbEditarSinCredito.setText("Sin Crédito");
        rbEditarSinCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarSinCreditoActionPerformed(evt);
            }
        });

        placeholder = new TextPrompt("Límite de crédito", txtEditarLimiteCliente);
        placeholder.changeAlpha(0.75f);
        placeholder.changeStyle(Font.ITALIC);
        txtEditarLimiteCliente.setEditable(false);
        txtEditarLimiteCliente.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlEditarCreditoClienteLayout = new javax.swing.GroupLayout(pnlEditarCreditoCliente);
        pnlEditarCreditoCliente.setLayout(pnlEditarCreditoClienteLayout);
        pnlEditarCreditoClienteLayout.setHorizontalGroup(
            pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbEditarCreditoLim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEditarLimiteCliente)
                    .addComponent(rbEditarCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbEditarSinCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEditarCreditoClienteLayout.setVerticalGroup(
            pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbEditarCredito)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEditarSinCredito)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEditarCreditoLim)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEditarLimiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pnlEditarTelefono.add(pnlEditarCreditoCliente);
        pnlEditarCreditoCliente.setBounds(340, 10, 201, 190);

        pnlInfoBasica.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información Básica", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        lblEditarCedulaCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarCedulaCliente.setText("Cédula:");

        txtEditarCedulaCliente.setEditable(false);
        txtEditarCedulaCliente.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txtEditarCedulaCliente.setEnabled(false);

        lblEditarNombreCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarNombreCliente.setText("Nombre:");

        txtEditarNombreCliente.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        ckbEditarDireccion.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        ckbEditarDireccion.setText("Agregar dirección");
        ckbEditarDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbEditarDireccionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInfoBasicaLayout = new javax.swing.GroupLayout(pnlInfoBasica);
        pnlInfoBasica.setLayout(pnlInfoBasicaLayout);
        pnlInfoBasicaLayout.setHorizontalGroup(
            pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoBasicaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInfoBasicaLayout.createSequentialGroup()
                        .addGap(0, 103, Short.MAX_VALUE)
                        .addComponent(ckbEditarDireccion))
                    .addGroup(pnlInfoBasicaLayout.createSequentialGroup()
                        .addGroup(pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEditarCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditarNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEditarNombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(txtEditarCedulaCliente))))
                .addContainerGap())
        );
        pnlInfoBasicaLayout.setVerticalGroup(
            pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoBasicaLayout.createSequentialGroup()
                .addGroup(pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEditarCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditarCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoBasicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEditarNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditarNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(ckbEditarDireccion)
                .addContainerGap())
        );

        pnlEditarTelefono.add(pnlInfoBasica);
        pnlInfoBasica.setBounds(12, 13, 315, 193);

        pnlEditarDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dirección ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        lblEditarBarrio.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarBarrio.setText("Barrio:");

        cbxEditarBarrio.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        cbxEditarDistrito.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        cbxEditarDistrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEditarDistritoActionPerformed(evt);
            }
        });

        lblEditarDistrito.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarDistrito.setText("Distrito:");

        lblEditarCanton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarCanton.setText("Cantón:");

        cbxEditarCanton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        cbxEditarCanton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEditarCantonActionPerformed(evt);
            }
        });

        cbxEditarProvincia.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        cbxEditarProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEditarProvinciaActionPerformed(evt);
            }
        });

        lblEditarProvincia.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarProvincia.setText("Provincia:");

        txaEditarOtrasSenas.setColumns(20);
        txaEditarOtrasSenas.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        txaEditarOtrasSenas.setRows(5);

        lblEditarOtrasSenas.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblEditarOtrasSenas.setText("Otras señas:");

        javax.swing.GroupLayout pnlEditarDireccionLayout = new javax.swing.GroupLayout(pnlEditarDireccion);
        pnlEditarDireccion.setLayout(pnlEditarDireccionLayout);
        pnlEditarDireccionLayout.setHorizontalGroup(
            pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarDireccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblEditarDistrito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEditarCanton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEditarProvincia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblEditarBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbxEditarDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxEditarCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxEditarBarrio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxEditarProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditarOtrasSenas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txaEditarOtrasSenas, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlEditarDireccionLayout.setVerticalGroup(
            pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarDireccionLayout.createSequentialGroup()
                .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txaEditarOtrasSenas, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlEditarDireccionLayout.createSequentialGroup()
                        .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxEditarProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditarOtrasSenas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxEditarCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEditarDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxEditarDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxEditarBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlEditarTelefono.add(pnlEditarDireccion);
        pnlEditarDireccion.setBounds(557, 13, 535, 190);

        scpnlClientesEditarCliente.setViewportView(pnlEditarTelefono);

        tbEditarContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/cl_ed_cliente.png")), scpnlClientesEditarCliente); // NOI18N

        scpnlClientesEditarContacto.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlEditarContactoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacto:"));
        pnlEditarContactoCliente.setAutoscrolls(true);

        lblEditarTelefono.setText("Teléfono:");

        lblEditarCorreo.setText("Correo Electrónico:");

        btnEditarGuardarTel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/save.png"))); // NOI18N
        btnEditarGuardarTel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarGuardarTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarGuardarTelActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        lsTelefonos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scpnlEditarListaTelef.setViewportView(lsTelefonos);

        btnEditarCancelTel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cancel.png"))); // NOI18N
        btnEditarCancelTel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarCancelTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCancelTelActionPerformed(evt);
            }
        });

        lsCorreos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scpnlEditarListaCorreo.setViewportView(lsCorreos);

        btnEditarGuardarCorreo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/save.png"))); // NOI18N
        btnEditarGuardarCorreo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarGuardarCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarGuardarCorreoActionPerformed(evt);
            }
        });

        btnEditarCancelCorreo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cancel.png"))); // NOI18N
        btnEditarCancelCorreo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarCancelCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCancelCorreoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditarContactoClienteLayout = new javax.swing.GroupLayout(pnlEditarContactoCliente);
        pnlEditarContactoCliente.setLayout(pnlEditarContactoClienteLayout);
        pnlEditarContactoClienteLayout.setHorizontalGroup(
            pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(txtEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarGuardarTel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarCancelTel))
                    .addComponent(scpnlEditarListaTelef, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(txtEditarCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarGuardarCorreo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarCancelCorreo))
                    .addComponent(lblEditarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scpnlEditarListaCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(529, Short.MAX_VALUE))
        );
        pnlEditarContactoClienteLayout.setVerticalGroup(
            pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(lblEditarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEditarCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnEditarGuardarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEditarCancelCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scpnlEditarListaCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(lblEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnEditarGuardarTel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEditarCancelTel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scpnlEditarListaTelef, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlEditarCorreoLayout = new javax.swing.GroupLayout(pnlEditarCorreo);
        pnlEditarCorreo.setLayout(pnlEditarCorreoLayout);
        pnlEditarCorreoLayout.setHorizontalGroup(
            pnlEditarCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEditarCorreoLayout.createSequentialGroup()
                .addComponent(pnlEditarContactoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlEditarCorreoLayout.setVerticalGroup(
            pnlEditarCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCorreoLayout.createSequentialGroup()
                .addComponent(pnlEditarContactoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        scpnlClientesEditarContacto.setViewportView(pnlEditarCorreo);

        tbEditarContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/cl_ed_contacto.png")), scpnlClientesEditarContacto); // NOI18N

        javax.swing.GroupLayout pnl_actualizarLayout = new javax.swing.GroupLayout(pnl_actualizar);
        pnl_actualizar.setLayout(pnl_actualizarLayout);
        pnl_actualizarLayout.setHorizontalGroup(
            pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_actualizarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbEditarContactoClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 1170, Short.MAX_VALUE)
                    .addComponent(spnl_editar_clientes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1170, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_actualizarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnl_actualizarLayout.setVerticalGroup(
            pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_actualizarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbEditarContactoClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnl_editar_clientes, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        tb_modCliente.addTab("Editar cliente", pnl_actualizar);

        lblDeshabSelectCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        lblDeshabSelectCliente.setText("Seleccionar Cliente:");

        tbDeshab.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        tblClientesActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "T. Cédula", "Nombre", "Crédito", "Límite de crédito", "Contacto", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientesActivos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblClientesActivos.getTableHeader().setReorderingAllowed(false);
        tblClientesActivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesActivosMouseClicked(evt);
            }
        });
        tblClientesActivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblClientesActivosKeyReleased(evt);
            }
        });
        scpnlClientesDeshab.setViewportView(tblClientesActivos);

        tbDeshab.addTab("Activos", scpnlClientesDeshab);

        tblClientesInactivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula ", "T. Cédula", "Nombre", "Crédito", "Límite de crédito", "Contacto", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientesInactivos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblClientesInactivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesInactivosMouseClicked(evt);
            }
        });
        tblClientesInactivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblClientesInactivosKeyReleased(evt);
            }
        });
        scpnlClientesHabilitar.setViewportView(tblClientesInactivos);

        tbDeshab.addTab("Inactivos", scpnlClientesHabilitar);

        pnlDeshabContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Activo:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 0, 18))); // NOI18N

        bg_crearHabilitar.add(rbDeshabDeshabCliente);
        rbDeshabDeshabCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbDeshabDeshabCliente.setText("Deshabilitar");

        bg_crearHabilitar.add(rbDeshabHabilitarCliente);
        rbDeshabHabilitarCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        rbDeshabHabilitarCliente.setText("Habilitar");

        javax.swing.GroupLayout pnlDeshabContainerLayout = new javax.swing.GroupLayout(pnlDeshabContainer);
        pnlDeshabContainer.setLayout(pnlDeshabContainerLayout);
        pnlDeshabContainerLayout.setHorizontalGroup(
            pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeshabContainerLayout.createSequentialGroup()
                .addComponent(rbDeshabHabilitarCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(rbDeshabDeshabCliente)
                .addContainerGap())
        );
        pnlDeshabContainerLayout.setVerticalGroup(
            pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeshabContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDeshabHabilitarCliente)
                    .addComponent(rbDeshabDeshabCliente)))
        );

        btn_deshabilitar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        btn_deshabilitar.setText("Guardar Cambios");
        btn_deshabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deshabilitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHabilitarLayout = new javax.swing.GroupLayout(pnlHabilitar);
        pnlHabilitar.setLayout(pnlHabilitarLayout);
        pnlHabilitarLayout.setHorizontalGroup(
            pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHabilitarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbDeshab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1170, Short.MAX_VALUE)
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addGroup(pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDeshabSelectCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlHabilitarLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(pnlDeshabContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_deshabilitar, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlHabilitarLayout.setVerticalGroup(
            pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHabilitarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_deshabilitar))
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addComponent(lblDeshabSelectCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbDeshab, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlDeshabContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );

        tb_modCliente.addTab("Habilitar clientes", pnlHabilitar);

        javax.swing.GroupLayout pnl_modClienteLayout = new javax.swing.GroupLayout(pnl_modCliente);
        pnl_modCliente.setLayout(pnl_modClienteLayout);
        pnl_modClienteLayout.setHorizontalGroup(
            pnl_modClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_modClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tb_modCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnl_modClienteLayout.setVerticalGroup(
            pnl_modClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_modClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tb_modCliente)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_modCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_modCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Para todas las tablas en la interfaz, llama el método que carga una tabla 
     * con la información de los clientes.
     */
    public void cargarTablas() {
        clientes = controlador.obtenerClientes();
        cargarClientesJTable(tbListadoCliente, true);
        cargarClientesJTable(tbl_crear, true);
        cargarClientesJTable(tbl_editar, true);
        cargarClientesJTable(tblClientesActivos, true);
        cargarClientesJTable(tblClientesInactivos, false);
    }
       
    /**
     * Carga/llena la tabla de la interfaz indicada con la información de 
     * los clientes.
     * @param tabla Tabla a llenar
     * @param estado Indica si el cliente está o no inactivo
     */
    public void cargarClientesJTable(JTable tabla, boolean estado) {
        Object[] row = new Object[7];
        model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
        model.setColumnCount(7);
        int i = 0;
        for (Cliente c: clientes) {

            if (c.getEstado().equals(Estado.Activo) && estado) {
                
                row[0] = c.getCedula();
                row[1] = c.getTipoCedula();
                row[2] = c.getNombre();
                row[3] = c.isAprobarCredito() ? "✔" : "✘";
                row[4] = "₡ " + c.getLimiteCredito();
                
                ArrayList<Contacto> contactos = c.getContactos();
                
                String texto = "<html><body>";
                for (Contacto ct: contactos) {
                    String tipo = ct.getTipo().equals(TipoContacto.CORREO) ? "✉" : "✆";
                    texto += tipo + " " + ct.getInfo() + "<br>";
                }
                texto += "</body></html>";
                row[5] = texto;
                
                String dir = "Sin dirección disponible";
                if(c.getDireccion() != null) {
                    dir = "<html><body>" +
                        c.getDireccion().getNomProvincia() + ",<br>" +
                        c.getDireccion().getNomCanton() + ",<br>" +
                        c.getDireccion().getNomDistrito() + ",<br>" +
                        c.getDireccion().getNomBarrio() 
                        + "</body></html>";
                }
                row[6] = dir;
                
                model.addRow(row);
                
                tabla.setRowHeight(i, contactos.size() > 3
                        ? tabla.getRowHeight(i) * contactos.size()
                        : tabla.getRowHeight(i) * 4);
                i++;
            }
            if (c.getEstado().equals(Estado.Deshabilitado) && !estado) {
                
                row[0] = c.getCedula();
                row[1] = c.getTipoCedula();
                row[2] = c.getNombre();
                row[3] = c.isAprobarCredito() ? "✔" : "✘";
                row[4] = "₡ " + c.getLimiteCredito();
                
                ArrayList<Contacto> contactos = c.getContactos();
                
                String texto = "<html><body>";
                for (Contacto ct: contactos) {
                    String tipo = ct.getTipo().equals(TipoContacto.CORREO) ? "✉" : "✆";
                    texto += tipo + " " + ct.getInfo() + "<br>";
                }
                texto += "</body></html>";
                row[5] = texto;
                
                String dir = "Sin dirección disponible";
                if(c.getDireccion() != null) {
                    dir = "<html><body>" +
                        c.getDireccion().getNomProvincia() + ",<br>" +
                        c.getDireccion().getNomCanton() + ",<br>" +
                        c.getDireccion().getNomDistrito() + ",<br>" +
                        c.getDireccion().getNomBarrio() 
                        + "</body></html>";
                }
                row[6] = dir;
                
                model.addRow(row);
                
                tabla.setRowHeight(i, contactos.size() > 3
                        ? tabla.getRowHeight(i) * contactos.size()
                        : tabla.getRowHeight(i) * 4);
                i++;
            }
        }
    }
    
    /**
     * Carga las ubicaciones en los combobox de dirección según la selección en
     * el combo anterior
     * @param campo identificador de campo (provincia, canton, distrito)
     * @param codP codigo de provincia seleccionada
     * @param codC codido de canton seleccionado
     * @param codD codigo del distrito seleccionado
     * @param combo combo box a cargar
     */
    public void cargarDirJCombo(String campo, String codP, String codC, 
            String codD, JComboBox combo) {
        
        combo.removeAllItems();
        
        ArrayList<DirFiltro> listaLugares = ctrDireccion.filtrarDireccion(campo,
                codP, codC, codD);
        for(int i = 0; i < listaLugares.size(); i++) {
            combo.addItem(listaLugares.get(i));
        }
    }
    
    /**
     * Cargar la dirección del cliente seleccionado
     * @param cliente cliente seleccionado en JTable
     */
    private void cargarEditDirCliente(Cliente cliente) {
        
        //Cargar dirección del cliente
        String iP = cliente.getDireccion().getCodProvincia();
        String iC = cliente.getDireccion().getCodCanton();
        String iD = cliente.getDireccion().getCodDistrito();
        String iB = cliente.getDireccion().getCodBarrio();
        String oS = cliente.getDireccion().getOtrasSenas();
        //PROVINCIA
        cargarDirJCombo("P", "", "", "", cbxEditarProvincia);
        for (int i=0; i<cbxEditarProvincia.getItemCount(); i++) {
            if (cbxEditarProvincia.getItemAt(i).getCodigo().equals(iP)) {
                cbxEditarProvincia.setSelectedIndex(i);
            }
        }
        // codigo de provincia seleccionada
        String codP = cbxEditarProvincia.getItemAt(
                cbxEditarProvincia.getSelectedIndex()).getCodigo();

        //CANTON
        cargarDirJCombo("C", codP, "", "", cbxEditarCanton);
        for (int i=0; i<cbxEditarCanton.getItemCount(); i++) {
            if (cbxEditarCanton.getItemAt(i).getCodigo().equals(iC)) {
                cbxEditarCanton.setSelectedIndex(i);
            }
        }
        // codigo del cantón seleccionado
        String codC = cbxEditarCanton.getItemAt(
                cbxEditarCanton.getSelectedIndex()).getCodigo();

        //DISTRITO
        cargarDirJCombo("D", codP, codC, "", cbxEditarDistrito);
        for (int i=0; i<cbxEditarDistrito.getItemCount(); i++) {
            if (cbxEditarDistrito.getItemAt(i).getCodigo().equals(iD)) {
                cbxEditarDistrito.setSelectedIndex(i);
            }
        }
        String codD = cbxEditarDistrito.getItemAt(
                cbxEditarDistrito.getSelectedIndex()).getCodigo();

        //BARRIO
        cargarDirJCombo("B", codP, codC, codD, cbxEditarBarrio);
        for (int i=0; i<cbxEditarBarrio.getItemCount(); i++) {
            if (cbxEditarBarrio.getItemAt(i).getCodigo().equals(iB)) {
                cbxEditarBarrio.setSelectedIndex(i);
            }
        }

        txaEditarOtrasSenas.setText(oS);
        ckbEditarDireccion.setEnabled(false);
    }
    
    /**
     * Cargar la los contactos del cliente seleccionado
     * @param cliente cliente seleccionado en JTable
     */
    private void cargarEditContactoCliente(Cliente cliente) {
        editarTelefonos = new ArrayList<>();
        editarCorreos = new ArrayList<>();
        DefaultListModel<String> mTelefonos = new DefaultListModel<>();
        DefaultListModel<String> mCorreos = new DefaultListModel<>();
        
        for (Contacto ct: cliente.getContactos()) {
            if (ct.getTipo().equals(TipoContacto.CORREO)) {
                editarCorreos.add(ct);
                mCorreos.addElement(ct.getInfo());
            } else {
                if (ct.getTipo().equals(TipoContacto.TELEFONO)) {
                    editarTelefonos.add(ct);
                    mTelefonos.addElement(ct.getInfo());
                }
            }
        }
        lsTelefonos.setModel(mTelefonos);
        lsCorreos.setModel(mCorreos);
    }
    
    /**
     * Carga los campos de Editar clientes cuando se selecciona uno 
     * de la JTable
     * @param cliente información del cliente a cargar
     */
    private void cargarEditarCliente(Cliente cliente) {
        txtEditarCedulaCliente.setText(cliente.getCedula());
        txtEditarNombreCliente.setText(cliente.getNombre());
        //Cargar crédito
        if (cliente.isAprobarCredito()) {
            if (cliente.getLimiteCredito() > 0.0) {
                rbEditarCreditoLim.setSelected(true);
                txtEditarLimiteCliente.setText(
                        String.valueOf(cliente.getLimiteCredito()));
                txtEditarLimiteCliente.setEditable(true);
            } else {
                rbEditarCredito.setSelected(true);
                txtEditarLimiteCliente.setText(
                        String.valueOf(cliente.getLimiteCredito()));
                txtEditarLimiteCliente.setEditable(false);
            }
            System.out.println(cliente.getLimiteCredito());
        } else {
            rbEditarSinCredito.setSelected(true);
            txtEditarLimiteCliente.setText("");
            txtEditarLimiteCliente.setEditable(false);
        }
        
        //Comportamientos de interfaz en caso de seleccionar un cliente que tenga
        // o no tenga dirección
        if(cliente.getDireccion() != null ) {
            cargarEditDirCliente(cliente);
            ckbEditarDireccion.setEnabled(false);
            ckbEditarDireccion.setSelected(true);
            pnlEditarDireccion.setVisible(true);
        } else {
            ckbEditarDireccion.setEnabled(true);
            ckbEditarDireccion.setSelected(false);
            pnlEditarDireccion.setVisible(false);
            cargarDirJCombo("P", "", "", "", cbxEditarProvincia);
        }
        cargarEditContactoCliente(cliente);
    }
    
     /**
     * Limpia los elementos en la interfaz ya sea para la pestaña de agregar 
     * o la de editar.
     * @param panel El nombre del panel en que se encuentra el usuario.
     */
    public void limpiarCampos(String panel) {
        switch (panel.toUpperCase()) {
            case "CREAR":
                cbxCrearTipoCedula.setSelectedIndex(0);
                ft_crear_cedulaCliente.setText("");
                txt_crear_limiteCliente.setText("");
                txt_crear_nombreCliente.setText("");
                lsCrearTelefonos.setModel(new DefaultListModel());
                lsCrearTelefonos.removeAll();
                lsCrearCorreos.setModel(new DefaultListModel());
                lsCrearCorreos.removeAll();
                cbxProvincia.setSelectedIndex(0);
                cbxCanton.setSelectedIndex(0);
                cbxDistrito.setSelectedIndex(0);
                cbxBarrio.setSelectedIndex(0);
                txtaOtrasSenas.setText("");
                break;
            case "EDITAR":
                txtEditarCedulaCliente.setText("");
                txtEditarLimiteCliente.setText("");
                txtEditarNombreCliente.setText("");
                txtEditarCorreoCliente.setText("");
                txtEditarTelefono.setText("");
                lsTelefonos.removeAll();
                lsCorreos.removeAll();
                cbxEditarProvincia.setSelectedIndex(0);
                cbxEditarCanton.setSelectedIndex(0);
                cbxEditarDistrito.setSelectedIndex(0);
                cbxEditarBarrio.setSelectedIndex(0);
                txaEditarOtrasSenas.setText("");
                break;
            default:
                throw new AssertionError();
        }
    }
    
    /**
     * Carga los combos de dirección de acuerdo al lugar seleccionado en el 
     * combo anterior
     * @param cbxCargar Combo a cargar
     * @param cbxP combo de provincia
     * @param cbxC combo de cantón
     * @param cbxD combo de distrito
     * @param p inicial del combo a cargar
     */
    private void selectDir(JComboBox cbxCargar, JComboBox<DirFiltro> cbxP, 
            JComboBox<DirFiltro> cbxC, JComboBox<DirFiltro> cbxD, String p) {
        String codP = "";
        String codC = "";
        String codD = "";        
        if (p.equals("C")) {
            if (cbxP.getItemCount() > 0) {
                codP = cbxP.getItemAt(cbxP.getSelectedIndex()).getCodigo();
            }            
        } else if (p.equals("D")) {
            if(cbxC.getItemCount() > 0) {
                codP = cbxP.getItemAt(cbxP.getSelectedIndex()).getCodigo();
                codC = cbxC.getItemAt(cbxC.getSelectedIndex()).getCodigo();
            }
        } else if (p.equals("B")) {        
            if(cbxD.getItemCount() > 0) {
                codP = cbxP.getItemAt(cbxP.getSelectedIndex()).getCodigo();
                codC = cbxC.getItemAt(cbxC.getSelectedIndex()).getCodigo();
                codD = cbxD.getItemAt(cbxD.getSelectedIndex()).getCodigo();
            }
        }
        cargarDirJCombo(p, codP, codC, codD, cbxCargar);
    }
    
    /**
     * Crear cliente: guardar/agregar un nuevo contacto
     * @param tel verdadero si es un teléfono, falso si es un correo.
     */
    private void agregarContacto(boolean tel) {
        if(tel) {
            String telefono = txt_agregarTelefono.getText().trim();
            if (verificacion.validaTelefono(telefono) && 
                    !crearTelefonos.contains(telefono)) {
                crearTelefonos.add(telefono);
                DefaultListModel<String> m = new DefaultListModel<>();
                for (int i=0; i<crearTelefonos.size(); i++) {
                    m.addElement(crearTelefonos.get(i));
                }
                lsCrearTelefonos.setModel(m);
            } else {
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                        TipoMensaje.PHONE_SYNTAX_FAILURE);
            }
            txt_agregarTelefono.setText("");
        } else {
            String correo = txt_agregarCorreo.getText().trim();
            if (verificacion.validaEmail(correo) 
                    && !crearCorreos.contains(correo)) {
                crearCorreos.add(correo);
                DefaultListModel<String> m = new DefaultListModel<>();
                for (int i=0; i<crearCorreos.size(); i++) {
                    m.addElement(crearCorreos.get(i));
                }
                lsCrearCorreos.setModel(m);
            } else {
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                        TipoMensaje.EMAIL_SYNTAX_FAILURE);
            }
            txt_agregarCorreo.setText("");
        }
        
    }
    
    /**
     * Crea un nuevo cliente en la BD con la información enviada por parámetro.
     * @param cedula cedula del cliente
     * @param tipoCed tipo de cédula del cliente
     * @param nombre nombre del cliente
     * @param limiteCred límite de crédito asignado
     * @param aprobarCred si tiene o no crédito permitido
     * @param contactos contactos del cliente
     */
    private void agregarCliente(String cedula, String tipoCed, String nombre,
            Direccion direc, String limiteCred, boolean aprobarCred, 
            ArrayList<ArrayList<Object>> contactos) {
          
        if (!nombre.isEmpty()) {

            double limiteCredito;
            try {
                limiteCredito = Double.valueOf(limiteCred);
                System.out.println(limiteCredito);
                
                System.out.println("TIPOCED: "+tipoCed);

                boolean creado = controlador.crearCliente(cedula, 
                        TipoCedula.getEnum(tipoCed).toString(), nombre, direc, 
                        limiteCredito, aprobarCred, contactos);

                if (creado) {
                    
                    Logger.registerNewLog(
                            msg.getTextoMensaje(
                                    TipoMensaje.CUSTOMER_INSERTION_SUCCESS));
                    
                    msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE, 
                    TipoMensaje.CUSTOMER_INSERTION_SUCCESS);

                    limpiarCampos("CREAR");
                    cargarTablas();
                } else {
                    msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.CUSTOMER_INSERTION_FAILURE);
                }
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                TipoMensaje.NUMBER_FORMAT_EXCEPTION);
            } catch (Exception ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                TipoMensaje.SOMETHING_WENT_WRONG);
            }
        } else {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.EMPTY_CUSTOMER_FIELDS);
        }
    }
    
    /**
     * Actualiza la información de los clientes.
     * @param cedula cedula del cliente
     * @param nombre nombre del cliente
     * @param limiteCred límite de crédito asignado 
     * @param aprobarCred si tiene o no crédito permitido
     * @param codPersona codigo de persona para enlazar en la tabla de la BD
     */
    private void actualizarCliente(String cedula, String nombre, 
            Direccion dir, String limiteCred, boolean aprobarCred) {
        
        if (!nombre.isEmpty()) {

            double limiteCredito;
            try {
                limiteCredito = Double.valueOf(limiteCred);
                
                boolean actualizado = controlador.actualizarCliente(cedula, 
                        nombre, dir, limiteCredito, aprobarCred);

                if (actualizado) {
                    System.out.println("Yay!");
                    msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE, 
                        TipoMensaje.CUSTOMER_UPDATE_SUCCESS);
                    
                    cargarTablas();
                    limpiarCampos("EDITAR");
                    
                    lsCorreos.setModel(new DefaultListModel());
                    lsCorreos.setModel(new DefaultListModel());
                } else {
                    System.out.println("Yaq!");
                    msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE, 
                        TipoMensaje.CUSTOMER_UPDATE_FAILURE);
                }
            } catch (NumberFormatException ex) {
                System.err.println(ex);
            } catch (Exception ex) {
                System.err.println(ex);
            }
        } else {
            msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE, 
                        TipoMensaje.EMPTY_TEXT_FIELD);
        }
    }
        
    /**
     * Obtiene de la interfaz toda la información necesaria para 
     * crear el cliente. 
     */
    private void prepararCrearCliente() {
        ArrayList<ArrayList<Object>> contactos = new ArrayList<>();
        ArrayList<Object> correo;
        for (int i=0; i<lsCrearCorreos.getModel().getSize(); i++) {
            correo = new ArrayList<>();
            correo.add(TipoContacto.CORREO);
            correo.add(lsCrearCorreos.getModel().getElementAt(i));
            contactos.add(correo);
        }
        
        ArrayList<Object> telefono;
        for (int i=0; i<lsCrearTelefonos.getModel().getSize(); i++) {
            telefono = new ArrayList<>();
            telefono.add(TipoContacto.TELEFONO);
            telefono.add(lsCrearTelefonos.getModel().getElementAt(i));
            contactos.add(telefono);
        }
        
        boolean credito = rbCrearCredito.isSelected() || 
                rbCrearCreditoLim.isSelected();
        String limiteCred = txt_crear_limiteCliente.getText().trim().isEmpty() ? 
                "0" : txt_crear_limiteCliente.getText().trim();
        
        System.out.println("CBXTIPOCEDULA OBJECT: "+cbxCrearTipoCedula.getSelectedItem());
        System.out.println("CBXTIPOCEDULA ENUM NAME: "+TipoCedula.getEnum(cbxCrearTipoCedula.getSelectedItem().toString()));
        
        agregarCliente(ft_crear_cedulaCliente.getText().replace("-", "").trim(),
                cbxCrearTipoCedula.getSelectedItem().toString(), 
                txt_crear_nombreCliente.getText().trim(), 
                prepararDireccion(false, 1), limiteCred, credito, contactos);
    }
    
    /**
     * Preparar la información de la dirección.
     * @param pnlEditar ¿es panel editar?
     * @param codDir código de dirección
     * @return la dirección
     */
    public Direccion prepararDireccion(boolean pnlEditar, int codDir) {

        String cP = cbxProvincia.getItemAt(cbxProvincia.getSelectedIndex()).getCodigo();
        String nP = cbxProvincia.getItemAt(cbxProvincia.getSelectedIndex()).getNombre();
        String cC = cbxCanton.getItemAt(cbxCanton.getSelectedIndex()).getCodigo();
        String nC = cbxCanton.getItemAt(cbxCanton.getSelectedIndex()).getNombre();
        String cD = cbxDistrito.getItemAt(cbxDistrito.getSelectedIndex()).getCodigo();
        String nD = cbxDistrito.getItemAt(cbxDistrito.getSelectedIndex()).getNombre();
        String cB = cbxBarrio.getItemAt(cbxBarrio.getSelectedIndex()).getCodigo();
        String nB = cbxBarrio.getItemAt(cbxBarrio.getSelectedIndex()).getNombre();
        String senas = txtaOtrasSenas.getText();

        if (pnlEditar) {
            cP = cbxEditarProvincia.getItemAt(cbxEditarProvincia.getSelectedIndex()).getCodigo();
            nP = cbxEditarProvincia.getItemAt(cbxEditarProvincia.getSelectedIndex()).getNombre();
            cC = cbxEditarCanton.getItemAt(cbxEditarCanton.getSelectedIndex()).getCodigo();
            nC = cbxEditarCanton.getItemAt(cbxEditarCanton.getSelectedIndex()).getNombre();
            cD = cbxEditarDistrito.getItemAt(cbxEditarDistrito.getSelectedIndex()).getCodigo();
            nD = cbxEditarDistrito.getItemAt(cbxEditarDistrito.getSelectedIndex()).getNombre();
            cB = cbxEditarBarrio.getItemAt(cbxEditarBarrio.getSelectedIndex()).getCodigo();
            nB = cbxEditarBarrio.getItemAt(cbxEditarBarrio.getSelectedIndex()).getNombre();
            senas = txaEditarOtrasSenas.getText();
        }
        
        //verificar el panel y el check box para retornar null o la dirección
        //on toda la información ingresada
        if (pnlEditar) {
            if (ckbEditarDireccion.isSelected()) {
                return new Direccion(codDir, cP, nP, cC, nC, cD, nD, cB, nB, senas);
            } return null;
        } else {
            if (ckbAgregarDireccion.isSelected()) {
                return new Direccion(codDir, cP, nP, cC, nC, cD, nD, cB, nB, senas);
            } return null;
        }
    }
    /**
     * Obtiene de la interfaz toda la información necesaria para 
     * editar el cliente. 
     */
    private void prepararEditarCliente() {
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int indiceFila = tbl_editar.getSelectedRow();
            
            boolean credito = rbEditarCredito.isSelected() || 
                    rbEditarCreditoLim.isSelected();
            String limiteCred = txtEditarLimiteCliente.getText().trim().isEmpty() 
                    || rbEditarCredito.isSelected() ? 
                    "0.0" : txtEditarLimiteCliente.getText().trim();
            
            String cedPersona = (String) model.getValueAt(indiceFila, 0);
            System.out.println("CODIGO PER EDITAR PERSONA: " + cedPersona);
            
            int codDir = 0;
            for (int i = 0; i < clientes.size(); i++) {
                if(clientes.get(i).getCedula().equals(cedPersona)) {
                    if(clientes.get(i).getDireccion()!= null) {
                        codDir = clientes.get(i).getDireccion().getCodigo();
                    }
                }
            }
                        
            actualizarCliente(txtEditarCedulaCliente.getText().trim(),
                    txtEditarNombreCliente.getText().trim(), 
                    prepararDireccion(true, codDir), limiteCred, credito);
            
        } catch (ArrayIndexOutOfBoundsException ex) {
            ex.printStackTrace();
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            
        }
    }
    
    /**
     * Selecciona el radiobutton(habilitado/deshabilitado) correspondiente 
     * cuando se selecciona un cliente activo o inactivo.
     * @param tabla tabla de clientes activos o inactivos 
     * @param rbD radiobutton deshabilitado
     * @param rbH radiobutton habilitado
     */
    private void selecClientePorEstado(JTable tabla, JRadioButton rbD, 
            JRadioButton rbH) {
        try {
            model = (DefaultTableModel) tabla.getModel();
            int selectedRowIndex = tabla.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    //Si el codigo coincide
                    if (clientes.get(i).getEstado().equals(Estado.Activo)) {
                        //Verifica el tipo de estado
                        rbD.setSelected(true);
                    } else {
                        rbH.setSelected(true);
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.ANY_ROW_SELECTED);
            ex.printStackTrace();
        }
        catch (Exception ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.SOMETHING_WENT_WRONG);
            ex.printStackTrace();
        }
    }
    
    /**
     * Activa o inactiva un cliente dependiendo de cuál radiobutton esté 
     * seleccionado cuando se guardan los cambios.
     */
    private void activarInactivarCliente() {
        try {
            model = tbDeshab.getSelectedIndex() == 0 ? 
                    (DefaultTableModel) tblClientesActivos.getModel() : 
                    (DefaultTableModel) tblClientesInactivos.getModel();

            int selectedRowIndex = tbDeshab.getSelectedIndex() == 0 ? 
                    tblClientesActivos.getSelectedRow() : 
                    tblClientesInactivos.getSelectedRow();

            Estado estado
                    = rbDeshabHabilitarCliente.isSelected() ? Estado.Activo : 
                    Estado.Deshabilitado;

            if (estado.equals(Estado.Deshabilitado)) {
                controlador.inactivarCliente(
                        model.getValueAt(selectedRowIndex, 0).toString());
            } else {
                controlador.activarCliente(
                        model.getValueAt(selectedRowIndex, 0).toString());
            }
            //Actualizar tablas
            cargarTablas();
        } catch (Exception e) {
            msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE,
                    TipoMensaje.ANY_ROW_SELECTED);
            e.printStackTrace();          
        }
    }
    
    /**
     * Muestra la lista de clientes filtrada según se indique en el criterio.
     */
    private void listarClientes(String criterio) {
        clientes = controlador.consultarClientes(criterio);
        cargarClientesJTable(tbListadoCliente, true);
    }
    
    /**
     * Edición de cliente: guardar el contacto (correo o telefono)
     * @param tel verdadero si es el telefono, falso si es un correo.
     */
    private void guardarEditContacto(boolean tel) {
        if(tel) {
            String telefono = txtEditarTelefono.getText().trim();
            int indice = 0;
            try {
                if (verificacion.validaTelefono(telefono)) {

                    indice = tbl_editar.getSelectedRow();
                    String cedula = 
                        tbl_editar.getModel().getValueAt(indice, 0).toString();
                    
                    for (Cliente c: clientes) {
                        if (c.getCedula().equals(cedula)) {
                            controlador.crearContacto(
                                telefono, c.getCedula(), TipoContacto.TELEFONO);
                            
                            editarTelefonos = new ArrayList<>();                            
                            for (Contacto ct: controlador.consultarContactos(
                                    c.getCedula())) {
                                if (ct.getTipo().equals(TipoContacto.TELEFONO)) {
                                    editarTelefonos.add(ct);
                                    DefaultListModel<String> m = 
                                            new DefaultListModel<>();
                                    
                                    for (int i=0; i<editarTelefonos.size(); i++) {
                                        m.addElement(
                                            editarTelefonos.get(i).getInfo());
                                    }
                                    lsTelefonos.setModel(m);
                                    txtEditarTelefono.setText("");
                                }
                            }
                        }
                    }
                } else {
                    msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                            TipoMensaje.PHONE_SYNTAX_FAILURE);
                }
            }catch (NullPointerException ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
            } catch (Exception ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
            } finally {
                cargarTablas();
                tbl_editar.setRowSelectionInterval(indice, indice);
            }
        } else {
            String correo = txtEditarCorreoCliente.getText().trim();
            int indice = 0;
            try {
                if (verificacion.validaEmail(correo)) {
                    indice = tbl_editar.getSelectedRow();
                    String cedula = 
                        tbl_editar.getModel().getValueAt(indice, 0).toString();
                    
                    for (Cliente c: clientes) {
                        if (c.getCedula().equals(cedula)) {
                            controlador.crearContacto(correo, c.getCedula(), 
                                    TipoContacto.CORREO);
                            
                            editarCorreos = new ArrayList<>();
                            for (Contacto ct: controlador.consultarContactos(
                                    c.getCedula())) {
                                if (ct.getTipo().equals(TipoContacto.CORREO)) {
                                    editarCorreos.add(ct);
                                    DefaultListModel<String> m = 
                                            new DefaultListModel<>();
                                    for (int i=0; i<editarCorreos.size(); i++) {
                                        m.addElement(
                                                editarCorreos.get(i).getInfo());
                                    }
                                    lsCorreos.setModel(m);
                                    txtEditarCorreoCliente.setText("");
                                }
                            }
                        }
                    }
                } else {
                    msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                            TipoMensaje.EMAIL_SYNTAX_FAILURE);
                }
            } catch (NullPointerException ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
            } catch (Exception ex) {
                ex.printStackTrace();
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
            } finally {
                cargarTablas();
                tbl_editar.setRowSelectionInterval(indice, indice);
            }
        }
    }
    
    /**
     * Edición del cliente: eliminar un contacto seleccionado en la lista de 
     * contactos.
     * @param tel verdadero si es un teléfono, falso si es un correo.
     */
    private void cancelEditContacto(boolean tel) {
        if(tel) {
            try {
                int indice = lsTelefonos.getSelectedIndex();            
                controlador.inactivarContacto(
                        editarTelefonos.get(indice).getCodigo());
                editarTelefonos.remove(indice);

                DefaultListModel<String> m = new DefaultListModel<>();
                for (int i=0; i<editarTelefonos.size(); i++) {
                    m.addElement(editarTelefonos.get(i).getInfo());
                }
                lsTelefonos.setModel(m);
            } catch(NullPointerException ex) {
                System.out.println("Cancel editar telefono: null pointer");
                ex.printStackTrace();
            } catch (ArrayIndexOutOfBoundsException ex) {
                System.out.println("Cancel editar telefono: index out of bounds");
                ex.printStackTrace();
            } catch (Exception ex) {
                System.out.println("Cancel editar telefono: exception");
                ex.printStackTrace();
            } finally {
                cargarTablas();
            }
        } else {
            int indice = 0;
            try {
                indice = lsCorreos.getSelectedIndex();
                controlador.inactivarContacto(editarCorreos.get(indice).getCodigo());
                editarCorreos.remove(indice);

                DefaultListModel<String> m = new DefaultListModel<>();
                for (int i=0; i<editarCorreos.size(); i++) {
                    m.addElement(editarCorreos.get(i).getInfo());
                }
                lsCorreos.setModel(m);
            } catch(NullPointerException ex) {
                System.out.println("Cancel editar correo: null pointer ");
                ex.printStackTrace();
            } catch (ArrayIndexOutOfBoundsException ex) {
                System.out.println("Cancel editar correo: index out of bounds");
                ex.printStackTrace();
            } catch (Exception ex) {
                System.out.println("Cancel editar correo: exception");
                ex.printStackTrace();
            } finally {
                cargarTablas();
                tbl_editar.setRowSelectionInterval(indice, indice);
            }
        }
    }
    
    
    
    /**
     * Habilita/deshabilita el campo de texto que indica el límite de crédito 
     * según corresponda cuando se selecciona un radiobutton de crédito.
     * @param editable habilita la edición para el campo de texto límite de crédito.
     * @param valor valor a ingresar en el campo de texto 
     * @param crear verdadero si es para crear o para editar.
     */
    private void habilitarCampoCredito (boolean editable, String valor, boolean crear) {
        
        if(crear) {
            txt_crear_limiteCliente.setText(valor);
            txt_crear_limiteCliente.setEditable(editable);
        } else {
            if (editable) {
                try {
                    model = (DefaultTableModel) tbl_editar.getModel();
                    int selectedRowIndex = tbl_editar.getSelectedRow();
                    
                    if (selectedRowIndex >= 0) {
                        String cedula
                        = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());


                        for (int i = 0; i < clientes.size(); i++) {
                            if (clientes.get(i).getCedula().equals(cedula)) {
                                valor = String.valueOf(clientes.get(i).getLimiteCredito());
                            }
                        }
                    }
                                    
                } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
                    ex.printStackTrace();
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            txtEditarLimiteCliente.setText(valor);
            txtEditarLimiteCliente.setEditable(editable);
        }
    }
    
    /**
     * Cargar la información del cliente seleccionado en la tabla de 
     * editar para editarlo en los campos de texto.
     */
    private void selectClienteEditar() {
        try {
           model = (DefaultTableModel) tbl_editar.getModel();
           int selectedRowIndex = tbl_editar.getSelectedRow();
           String cedula
           = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

           for (int i = 0; i < clientes.size(); i++) {
               if (clientes.get(i).getCedula().equals(cedula)) {
                   cbxEditarCanton.removeAllItems();
                   cbxEditarDistrito.removeAllItems();
                   cbxEditarBarrio.removeAllItems();
                   txaEditarOtrasSenas.setText("");
                   cargarEditarCliente(clientes.get(i));
               }
           }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    /**
     * Ocultar o mostrar el panel de dirección.
     * @param pnlCrear ¿es el panel crear o editar?
     * @param ckb objeto check box a seleccionar-deseleccionar
     */
    private void mostrarDireccion(boolean pnlCrear, JCheckBox ckb) {
        
        if (pnlCrear) {
            if (ckb.isSelected()) {
                
                int x = pnl_agregar.getWidth()-363;
                int y = 10;
                int w = 334;
                int h = 263; 
                
                pnlCrearDireccion.setVisible(true);
                pnlCrearDireccion.setBounds(x, y, w, h);
                pnl_agregar.add(pnlCrearDireccion);
            } else {
                pnlCrearDireccion.setVisible(false);
            }
        } else {
            if (ckb.isSelected()) {
                
                int x = pnlEditarTelefono.getWidth()-535;
                int y = 10;
                int w = 586;
                int h = 185; 
                
                pnlEditarDireccion.setVisible(true);
                pnlEditarDireccion.setBounds(x, y, w, h);
                pnlEditarTelefono.add(pnlEditarDireccion);
            } else {
                pnlEditarDireccion.setVisible(false);
            }
        }
    }
    private void btnCrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearClienteActionPerformed
        prepararCrearCliente();    
    }//GEN-LAST:event_btnCrearClienteActionPerformed

    private void btnEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarClienteActionPerformed
        prepararEditarCliente();
    }//GEN-LAST:event_btnEditarClienteActionPerformed

    private void tblClientesActivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesActivosMouseClicked
        selecClientePorEstado(tblClientesActivos, rbDeshabDeshabCliente, 
                    rbDeshabHabilitarCliente);
    }//GEN-LAST:event_tblClientesActivosMouseClicked

    private void tblClientesActivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesActivosKeyReleased
        if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) {
            selecClientePorEstado(tblClientesActivos, rbDeshabDeshabCliente, 
                rbDeshabHabilitarCliente);
        }
    }//GEN-LAST:event_tblClientesActivosKeyReleased

    private void tblClientesInactivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesInactivosMouseClicked
        selecClientePorEstado(tblClientesInactivos, rbDeshabDeshabCliente, 
                rbDeshabHabilitarCliente);
    }//GEN-LAST:event_tblClientesInactivosMouseClicked

    private void tblClientesInactivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesInactivosKeyReleased
        if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) {
            selecClientePorEstado(tblClientesInactivos, rbDeshabDeshabCliente,
                    rbDeshabHabilitarCliente);
        }
        
    }//GEN-LAST:event_tblClientesInactivosKeyReleased

    private void btn_deshabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deshabilitarActionPerformed
        activarInactivarCliente();
    }//GEN-LAST:event_btn_deshabilitarActionPerformed

    private void btnEditarGuardarTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarGuardarTelActionPerformed
        guardarEditContacto(true);
    }//GEN-LAST:event_btnEditarGuardarTelActionPerformed

    private void txtListadoClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtListadoClienteKeyReleased
        listarClientes(txtListadoCliente.getText().trim());
    }//GEN-LAST:event_txtListadoClienteKeyReleased

    private void btnEditarCancelTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCancelTelActionPerformed
        cancelEditContacto(true);
    }//GEN-LAST:event_btnEditarCancelTelActionPerformed

    private void btnEditarGuardarCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarGuardarCorreoActionPerformed
        //msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, null);
        guardarEditContacto(false);
    }//GEN-LAST:event_btnEditarGuardarCorreoActionPerformed

    private void btnEditarCancelCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCancelCorreoActionPerformed
        cancelEditContacto(false);
    }//GEN-LAST:event_btnEditarCancelCorreoActionPerformed

    private void btnAgregarCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCorreoActionPerformed
        agregarContacto(false);
    }//GEN-LAST:event_btnAgregarCorreoActionPerformed

    private void btnAgregarTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTelefonoActionPerformed
        agregarContacto(true);        
    }//GEN-LAST:event_btnAgregarTelefonoActionPerformed

    private void rbCrearCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearCreditoActionPerformed
        habilitarCampoCredito(false, "0", true);
    }//GEN-LAST:event_rbCrearCreditoActionPerformed

    private void rbCrearCreditoLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearCreditoLimActionPerformed
        habilitarCampoCredito(true, "", true);
    }//GEN-LAST:event_rbCrearCreditoLimActionPerformed

    private void rbCrearSinCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearSinCreditoActionPerformed
        habilitarCampoCredito(false, "", true);
    }//GEN-LAST:event_rbCrearSinCreditoActionPerformed

    private void tbl_editarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_editarMouseClicked
       selectClienteEditar();
    }//GEN-LAST:event_tbl_editarMouseClicked

    private void tbl_editarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_editarKeyReleased
        if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) {
            selectClienteEditar();
        }
    }//GEN-LAST:event_tbl_editarKeyReleased

    private void itEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itEditarActionPerformed
        try {
            model = (DefaultTableModel) tbListadoCliente.getModel();
            int selectedRowIndex = tbListadoCliente.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    cargarEditarCliente(clientes.get(i));
                }
            }
            tb_modCliente.setSelectedIndex(2);
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_itEditarActionPerformed

    private void rbEditarCreditoLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarCreditoLimActionPerformed
        habilitarCampoCredito(true, "", false);        
    }//GEN-LAST:event_rbEditarCreditoLimActionPerformed

    private void rbEditarCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarCreditoActionPerformed
        habilitarCampoCredito(false, "0.0", false);
    }//GEN-LAST:event_rbEditarCreditoActionPerformed

    private void rbEditarSinCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarSinCreditoActionPerformed
        habilitarCampoCredito(false, "", false);
    }//GEN-LAST:event_rbEditarSinCreditoActionPerformed

    private void cbxProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProvinciaActionPerformed
        selectDir(cbxCanton, cbxProvincia, cbxCanton, cbxDistrito, "C");
    }//GEN-LAST:event_cbxProvinciaActionPerformed
    
    private void cbxCantonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCantonActionPerformed
        selectDir(cbxDistrito, cbxProvincia, cbxCanton, cbxDistrito, "D");
    }//GEN-LAST:event_cbxCantonActionPerformed

    private void cbxDistritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDistritoActionPerformed
        selectDir(cbxBarrio, cbxProvincia, cbxCanton, cbxDistrito, "B");
    }//GEN-LAST:event_cbxDistritoActionPerformed

    private void cbxEditarProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEditarProvinciaActionPerformed
        selectDir(cbxEditarCanton, cbxEditarProvincia, cbxEditarCanton, 
                cbxEditarDistrito, "C");
    }//GEN-LAST:event_cbxEditarProvinciaActionPerformed

    private void cbxEditarCantonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEditarCantonActionPerformed
        selectDir(cbxEditarDistrito, cbxEditarProvincia, cbxEditarCanton, 
                cbxEditarDistrito, "D");
    }//GEN-LAST:event_cbxEditarCantonActionPerformed

    private void cbxEditarDistritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEditarDistritoActionPerformed
        selectDir(cbxEditarBarrio, cbxEditarProvincia, cbxEditarCanton, 
                cbxEditarDistrito, "B");
    }//GEN-LAST:event_cbxEditarDistritoActionPerformed

    private void ckbAgregarDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbAgregarDireccionActionPerformed
        mostrarDireccion(true, ckbAgregarDireccion);
    }//GEN-LAST:event_ckbAgregarDireccionActionPerformed

    private void ckbEditarDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbEditarDireccionActionPerformed
        mostrarDireccion(false, ckbEditarDireccion);
    }//GEN-LAST:event_ckbEditarDireccionActionPerformed

    private void cbxCrearTipoCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCrearTipoCedulaActionPerformed
        TipoCedula tc = TipoCedula.getEnum(cbxCrearTipoCedula.getSelectedItem().toString());
        ft_crear_cedulaCliente.setText("");
        
        if (tc.equals(TipoCedula.FISICA)) {
            try {
                MaskFormatter formatter = new MaskFormatter("#-####-####");
                formatter.setPlaceholderCharacter('_');
        
                ft_crear_cedulaCliente.setFormatterFactory(
                        new javax.swing.text.DefaultFormatterFactory(formatter));
                
                //Sin esto no permite ingresar nuevo texto cuando se cambia
                //la máscara y ya se ha ingresado texto
                ft_crear_cedulaCliente.setValue(null);
            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
        } else if (tc.equals(TipoCedula.JURIDICA)) {
            try {
                MaskFormatter formatter = new MaskFormatter("#-###-######");
                formatter.setPlaceholderCharacter('_');
                
                ft_crear_cedulaCliente.setFormatterFactory(
                        new javax.swing.text.DefaultFormatterFactory(formatter));
                
                //Sin esto no permite ingresar nuevo texto cuando se cambia
                //la máscara y ya se ha ingresado texto
                ft_crear_cedulaCliente.setValue(null);
            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_cbxCrearTipoCedulaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_crearCredito;
    private javax.swing.ButtonGroup bg_crearHabilitar;
    private javax.swing.ButtonGroup bg_editarCredito;
    private javax.swing.JButton btnAgregarCorreo;
    private javax.swing.JButton btnAgregarTelefono;
    private javax.swing.JButton btnCrearCliente;
    private javax.swing.JButton btnEditarCancelCorreo;
    private javax.swing.JButton btnEditarCancelTel;
    private javax.swing.JButton btnEditarCliente;
    private javax.swing.JButton btnEditarGuardarCorreo;
    private javax.swing.JButton btnEditarGuardarTel;
    private javax.swing.JButton btn_deshabilitar;
    private javax.swing.JComboBox<DirFiltro> cbxBarrio;
    private javax.swing.JComboBox<DirFiltro> cbxCanton;
    private javax.swing.JComboBox<String> cbxCrearTipoCedula;
    private javax.swing.JComboBox<DirFiltro> cbxDistrito;
    private javax.swing.JComboBox<DirFiltro> cbxEditarBarrio;
    private javax.swing.JComboBox<DirFiltro> cbxEditarCanton;
    private javax.swing.JComboBox<DirFiltro> cbxEditarDistrito;
    private javax.swing.JComboBox<DirFiltro> cbxEditarProvincia;
    private javax.swing.JComboBox<DirFiltro> cbxProvincia;
    private javax.swing.JCheckBox ckbAgregarDireccion;
    private javax.swing.JCheckBox ckbEditarDireccion;
    private javax.swing.JFormattedTextField ft_crear_cedulaCliente;
    private javax.swing.JMenuItem itEditar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCrearTipoCedula;
    private javax.swing.JLabel lblDeshabSelectCliente;
    private javax.swing.JLabel lblEditarBarrio;
    private javax.swing.JLabel lblEditarCanton;
    private javax.swing.JLabel lblEditarCedulaCliente;
    private javax.swing.JLabel lblEditarCorreo;
    private javax.swing.JLabel lblEditarDistrito;
    private javax.swing.JLabel lblEditarNombreCliente;
    private javax.swing.JLabel lblEditarOtrasSenas;
    private javax.swing.JLabel lblEditarProvincia;
    private javax.swing.JLabel lblEditarTelefono;
    private javax.swing.JLabel lblListadoCliente;
    private javax.swing.JLabel lbl_crear_barrio;
    private javax.swing.JLabel lbl_crear_barrio1;
    private javax.swing.JLabel lbl_crear_canton;
    private javax.swing.JLabel lbl_crear_cedulaCliente;
    private javax.swing.JLabel lbl_crear_distrito;
    private javax.swing.JLabel lbl_crear_nombreCliente;
    private javax.swing.JLabel lbl_crear_provincia;
    private javax.swing.JList<String> lsCorreos;
    private javax.swing.JList<String> lsCrearCorreos;
    private javax.swing.JList<String> lsCrearTelefonos;
    private javax.swing.JList<String> lsTelefonos;
    private javax.swing.JPopupMenu pmnMenuEmergente;
    private javax.swing.JPanel pnlCrearContactoCliente;
    private javax.swing.JPanel pnlCrearCorreo1;
    private javax.swing.JPanel pnlCrearDireccion;
    private javax.swing.JPanel pnlCrearInfoBase;
    private javax.swing.JPanel pnlCrearTelefono;
    private javax.swing.JPanel pnlDeshabContainer;
    private javax.swing.JPanel pnlEditarContactoCliente;
    private javax.swing.JPanel pnlEditarCorreo;
    private javax.swing.JPanel pnlEditarCreditoCliente;
    private javax.swing.JPanel pnlEditarDireccion;
    private javax.swing.JPanel pnlEditarTelefono;
    private javax.swing.JPanel pnlHabilitar;
    private javax.swing.JPanel pnlInfoBasica;
    private javax.swing.JPanel pnl_actualizar;
    private javax.swing.JPanel pnl_agregar;
    private javax.swing.JPanel pnl_crear_creditoCliente;
    private javax.swing.JPanel pnl_listado;
    private javax.swing.JPanel pnl_modCliente;
    private javax.swing.JRadioButton rbCrearCredito;
    private javax.swing.JRadioButton rbCrearCreditoLim;
    private javax.swing.JRadioButton rbCrearSinCredito;
    private javax.swing.JRadioButton rbDeshabDeshabCliente;
    private javax.swing.JRadioButton rbDeshabHabilitarCliente;
    private javax.swing.JRadioButton rbEditarCredito;
    private javax.swing.JRadioButton rbEditarCreditoLim;
    private javax.swing.JRadioButton rbEditarSinCredito;
    private javax.swing.JScrollPane scpnlClientesCrearTelefono;
    private javax.swing.JScrollPane scpnlClientesDeshab;
    private javax.swing.JScrollPane scpnlClientesEditarCliente;
    private javax.swing.JScrollPane scpnlClientesEditarContacto;
    private javax.swing.JScrollPane scpnlClientesHabilitar;
    private javax.swing.JScrollPane scpnlEditarListaCorreo;
    private javax.swing.JScrollPane scpnlEditarListaTelef;
    private javax.swing.JScrollPane scpnlTblListadoCliente;
    private javax.swing.JScrollPane spnl_crear_clientes;
    private javax.swing.JScrollPane spnl_editar_clientes;
    private javax.swing.JTabbedPane tbCrearContactoClientes;
    private javax.swing.JTabbedPane tbDeshab;
    private javax.swing.JTabbedPane tbEditarContactoClientes;
    private javax.swing.JTable tbListadoCliente;
    private javax.swing.JTabbedPane tb_modCliente;
    private javax.swing.JTable tblClientesActivos;
    private javax.swing.JTable tblClientesInactivos;
    private javax.swing.JTable tbl_crear;
    private javax.swing.JTable tbl_editar;
    private javax.swing.JTextArea txaEditarOtrasSenas;
    private javax.swing.JTextField txtEditarCedulaCliente;
    private javax.swing.JTextField txtEditarCorreoCliente;
    private javax.swing.JTextField txtEditarLimiteCliente;
    private javax.swing.JTextField txtEditarNombreCliente;
    private javax.swing.JTextField txtEditarTelefono;
    private javax.swing.JTextField txtListadoCliente;
    private javax.swing.JTextField txt_agregarCorreo;
    private javax.swing.JTextField txt_agregarTelefono;
    private javax.swing.JTextField txt_crear_limiteCliente;
    private javax.swing.JTextField txt_crear_nombreCliente;
    private javax.swing.JTextArea txtaOtrasSenas;
    // End of variables declaration//GEN-END:variables
}
