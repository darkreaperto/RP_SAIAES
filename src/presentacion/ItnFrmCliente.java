/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import controladores.CtrAcceso;
import controladores.CtrCliente;
import controladores.CtrDireccion;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import logica.negocio.Cliente;
import logica.negocio.Contacto;
import logica.negocio.Direccion;
import logica.servicios.Mensaje;
import logica.servicios.Regex;
import logica.servicios.DirFiltro;
import util.Estado;
import util.TipoContacto;
import util.TipoMensaje;

/**
 * Inicializa la ventana que contiene la información de los clientes.
 * @author ahoihanabi
 */
public class ItnFrmCliente extends javax.swing.JInternalFrame {
    
    private static ItnFrmCliente instancia = null;
    private static CtrCliente controlador;
    private static CtrDireccion ctrDireccion;
    private static CtrAcceso sesion;
    private static Mensaje msg;
    private static ArrayList<Cliente> clientes;
    private static ArrayList<String> crearTelefonos;
    private static ArrayList<String> crearCorreos;
    private static ArrayList<Contacto> editarTelefonos;
    private static ArrayList<Contacto> editarCorreos;
    private static DefaultTableModel model;
    private final Regex verificacion;
    
    private int masTelefono = 1;
    private int masCorreo = 1;
    /**
     * Instancia un nuevo formulario interno de clientes.
     * @param sesionAcc Usuario en sesión actual 
     * @param clientes Lista con los clientes en la base de datos
     */
    protected ItnFrmCliente(CtrAcceso sesionAcc, ArrayList<Cliente> clientes) {
        initComponents();
        //Inicializar variables
        controlador = CtrCliente.getInstancia();
        ctrDireccion = CtrDireccion.getInstancia();
        
        ItnFrmCliente.clientes = clientes;
        ItnFrmCliente.sesion = sesionAcc;
        crearCorreos = new ArrayList<>();
        crearTelefonos = new ArrayList<>();
        verificacion = new Regex();
        msg = new Mensaje();
        //correos.add(txt_crear_correo);
        //telefonos.add(txt_crear_telefono);
        cargarTablas();
        cargarDireccion("P", "", "", "", cbxProvincia);
    }
    
    /**
     * Retorna la única instancia de la clase.
     *
     * @param sesionAcc Usuario en sesión actual.
     * @param clientes Lista de clientes en la base de datos.
     * @return instancia.
     */
    public static ItnFrmCliente getInstancia(CtrAcceso sesionAcc,
            ArrayList<Cliente> clientes) {
        if (instancia == null) {
            instancia = new ItnFrmCliente(sesionAcc, clientes);
        }
        return instancia;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_crearCredito = new javax.swing.ButtonGroup();
        bg_crearHabilitar = new javax.swing.ButtonGroup();
        bg_editarCredito = new javax.swing.ButtonGroup();
        menuEmergente = new javax.swing.JPopupMenu();
        itEditar = new javax.swing.JMenuItem();
        pnl_modCliente = new javax.swing.JPanel();
        tb_modCliente = new javax.swing.JTabbedPane();
        pnl_listado = new javax.swing.JPanel();
        lblListadoCliente = new javax.swing.JLabel();
        txtListadoCliente = new javax.swing.JTextField();
        scpnlTblListadoCliente = new javax.swing.JScrollPane();
        tbListadoCliente = new javax.swing.JTable();
        pnl_agregar = new javax.swing.JPanel();
        lbl_crear_cedulaCliente = new javax.swing.JLabel();
        txt_crear_cedulaCliente = new javax.swing.JTextField();
        lbl_crear_nombreCliente = new javax.swing.JLabel();
        txt_crear_nombreCliente = new javax.swing.JTextField();
        lbl_crear_apellidoCliente1 = new javax.swing.JLabel();
        txt_crear_apellidoCliente1 = new javax.swing.JTextField();
        lbl_crear_apellidoCliente2 = new javax.swing.JLabel();
        txt_crear_apellidoCliente2 = new javax.swing.JTextField();
        pnl_crear_creditoCliente = new javax.swing.JPanel();
        rbCrearCreditoLim = new javax.swing.JRadioButton();
        rbCrearCredito = new javax.swing.JRadioButton();
        rbCrearSinCredito = new javax.swing.JRadioButton();
        lbl_crear_limiteCliente = new javax.swing.JLabel();
        txt_crear_limiteCliente = new javax.swing.JTextField();
        pnlCrearContactoCliente = new javax.swing.JPanel();
        tbCrearContactoClientes = new javax.swing.JTabbedPane();
        scpnlClientesCrearTelefono = new javax.swing.JScrollPane();
        pnlCrearTelefono = new javax.swing.JPanel();
        lblCrearTelefono = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsCrearTelefonos = new javax.swing.JList<>();
        txt_agregarTelefono = new javax.swing.JTextField();
        btnAgregarTelefono = new javax.swing.JButton();
        pnlCrearCorreo1 = new javax.swing.JPanel();
        lbl_crear_correo1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsCrearCorreos = new javax.swing.JList<>();
        txt_agregarCorreo = new javax.swing.JTextField();
        btnAgregarCorreo = new javax.swing.JButton();
        spnl_crear_clientes = new javax.swing.JScrollPane();
        tbl_crear = new javax.swing.JTable();
        btnCrearCliente = new javax.swing.JButton();
        lbl_crear_provincia = new javax.swing.JLabel();
        lbl_crear_canton = new javax.swing.JLabel();
        lbl_crear_distrito = new javax.swing.JLabel();
        lbl_crear_barrio = new javax.swing.JLabel();
        lbl_crear_barrio1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaOtrasSenas = new javax.swing.JTextArea();
        cbxProvincia = new javax.swing.JComboBox<>();
        cbxCanton = new javax.swing.JComboBox<>();
        cbxDistrito = new javax.swing.JComboBox<>();
        cbxBarrio = new javax.swing.JComboBox<>();
        pnl_actualizar = new javax.swing.JPanel();
        spnl_editar_clientes = new javax.swing.JScrollPane();
        tbl_editar = new javax.swing.JTable();
        btnEditarCliente = new javax.swing.JButton();
        tbEditarContactoClientes = new javax.swing.JTabbedPane();
        scpnlClientesEditarCliente = new javax.swing.JScrollPane();
        pnlEditarTelefono = new javax.swing.JPanel();
        txtEditarCedulaCliente = new javax.swing.JTextField();
        lblEditarCedulaCliente = new javax.swing.JLabel();
        txtEditarNombreCliente = new javax.swing.JTextField();
        lblEditarNombreCliente = new javax.swing.JLabel();
        pnlEditarCreditoCliente = new javax.swing.JPanel();
        rbEditarCreditoLim = new javax.swing.JRadioButton();
        rbEditarCredito = new javax.swing.JRadioButton();
        rbEditarSinCredito = new javax.swing.JRadioButton();
        txtEditarPrimerApellido = new javax.swing.JTextField();
        lblEditarApellidoCliente = new javax.swing.JLabel();
        lblEditarSegundoApellido = new javax.swing.JLabel();
        txtEditarSegundoApellido = new javax.swing.JTextField();
        lblEditarLimiteCliente = new javax.swing.JLabel();
        txtEditarLimiteCliente = new javax.swing.JTextField();
        scpnlClientesEditarContacto = new javax.swing.JScrollPane();
        pnlEditarCorreo = new javax.swing.JPanel();
        pnlEditarContactoCliente = new javax.swing.JPanel();
        lblEditarTelefono = new javax.swing.JLabel();
        lblEditarCorreo = new javax.swing.JLabel();
        btnEditarGuardarTel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        scpnlEditarListaTelef = new javax.swing.JScrollPane();
        lsTelefonos = new javax.swing.JList<>();
        txtEditarTelefono = new javax.swing.JTextField();
        btnEditarCancelTel = new javax.swing.JButton();
        scpnlEditarListaCorreo = new javax.swing.JScrollPane();
        lsCorreos = new javax.swing.JList<>();
        txtEditarCorreoCliente = new javax.swing.JTextField();
        btnEditarGuardarCorreo = new javax.swing.JButton();
        btnEditarCancelCorreo = new javax.swing.JButton();
        pnlHabilitar = new javax.swing.JPanel();
        lblDeshabSelectCliente = new javax.swing.JLabel();
        tbDeshab = new javax.swing.JTabbedPane();
        scpnlClientesDeshab = new javax.swing.JScrollPane();
        tblClientesActivos = new javax.swing.JTable();
        scpnlClientesHabilitar = new javax.swing.JScrollPane();
        tblClientesInactivos = new javax.swing.JTable();
        pnlDeshabContainer = new javax.swing.JPanel();
        rbDeshabDeshabCliente = new javax.swing.JRadioButton();
        rbDeshabHabilitarCliente = new javax.swing.JRadioButton();
        btn_deshabilitar = new javax.swing.JButton();

        itEditar.setText("Editar");
        itEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itEditarActionPerformed(evt);
            }
        });
        menuEmergente.add(itEditar);

        setClosable(true);
        setIconifiable(true);
        setTitle("Módulo de Clientes");
        setPreferredSize(new java.awt.Dimension(1240, 670));

        lblListadoCliente.setText("Buscar cliente: ");

        txtListadoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtListadoClienteKeyReleased(evt);
            }
        });

        tbListadoCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "Primer Apellido", "Segundo Apellido", "Nombre", "Crédito", "Límite de crédito", "Contactos", "Dirección", "Cod. Cliente", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbListadoCliente.setComponentPopupMenu(menuEmergente);
        tbListadoCliente.setRowHeight(20);
        tbListadoCliente.getTableHeader().setReorderingAllowed(false);
        scpnlTblListadoCliente.setViewportView(tbListadoCliente);

        javax.swing.GroupLayout pnl_listadoLayout = new javax.swing.GroupLayout(pnl_listado);
        pnl_listado.setLayout(pnl_listadoLayout);
        pnl_listadoLayout.setHorizontalGroup(
            pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnl_listadoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scpnlTblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_listadoLayout.createSequentialGroup()
                        .addComponent(lblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtListadoCliente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_listadoLayout.setVerticalGroup(
            pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_listadoLayout.createSequentialGroup()
                .addGroup(pnl_listadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_listadoLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_listadoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(scpnlTblListadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tb_modCliente.addTab("Listado Clientes", pnl_listado);

        lbl_crear_cedulaCliente.setText("Cédula:");

        lbl_crear_nombreCliente.setText("Nombre:");

        lbl_crear_apellidoCliente1.setText("Primer Apellido:");

        lbl_crear_apellidoCliente2.setText("Segundo Apellido:");

        pnl_crear_creditoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Crédito de Cliente:"));

        bg_crearCredito.add(rbCrearCreditoLim);
        rbCrearCreditoLim.setText("Crédito limitado");
        rbCrearCreditoLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearCreditoLimActionPerformed(evt);
            }
        });

        bg_crearCredito.add(rbCrearCredito);
        rbCrearCredito.setText("Crédito");
        rbCrearCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearCreditoActionPerformed(evt);
            }
        });

        bg_crearCredito.add(rbCrearSinCredito);
        rbCrearSinCredito.setSelected(true);
        rbCrearSinCredito.setText("Sin crédito");
        rbCrearSinCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrearSinCreditoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_crear_creditoClienteLayout = new javax.swing.GroupLayout(pnl_crear_creditoCliente);
        pnl_crear_creditoCliente.setLayout(pnl_crear_creditoClienteLayout);
        pnl_crear_creditoClienteLayout.setHorizontalGroup(
            pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_crear_creditoClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbCrearCredito)
                    .addComponent(rbCrearCreditoLim))
                .addGap(89, 89, 89))
            .addGroup(pnl_crear_creditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbCrearSinCredito)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_crear_creditoClienteLayout.setVerticalGroup(
            pnl_crear_creditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_crear_creditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbCrearCredito)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbCrearCreditoLim)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbCrearSinCredito))
        );

        lbl_crear_limiteCliente.setText("Límite Crédito:");

        txt_crear_limiteCliente.setEditable(false);

        pnlCrearContactoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacto:"));
        pnlCrearContactoCliente.setAutoscrolls(true);

        tbCrearContactoClientes.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tbCrearContactoClientes.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        scpnlClientesCrearTelefono.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlCrearTelefono.setRequestFocusEnabled(false);

        lblCrearTelefono.setText("Teléfono:");

        jScrollPane2.setViewportView(lsCrearTelefonos);

        btnAgregarTelefono.setText("+");
        btnAgregarTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTelefonoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCrearTelefonoLayout = new javax.swing.GroupLayout(pnlCrearTelefono);
        pnlCrearTelefono.setLayout(pnlCrearTelefonoLayout);
        pnlCrearTelefonoLayout.setHorizontalGroup(
            pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                    .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                        .addComponent(lblCrearTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                        .addComponent(txt_agregarTelefono)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlCrearTelefonoLayout.setVerticalGroup(
            pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearTelefonoLayout.createSequentialGroup()
                .addComponent(lblCrearTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCrearTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_agregarTelefono)
                    .addComponent(btnAgregarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        scpnlClientesCrearTelefono.setViewportView(pnlCrearTelefono);

        tbCrearContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/telefono.png")), scpnlClientesCrearTelefono); // NOI18N

        lbl_crear_correo1.setText("Correo Electrónico:");

        jScrollPane1.setViewportView(lsCrearCorreos);

        btnAgregarCorreo.setText("+");
        btnAgregarCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCorreoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCrearCorreo1Layout = new javax.swing.GroupLayout(pnlCrearCorreo1);
        pnlCrearCorreo1.setLayout(pnlCrearCorreo1Layout);
        pnlCrearCorreo1Layout.setHorizontalGroup(
            pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                        .addComponent(lbl_crear_correo1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 178, Short.MAX_VALUE))
                    .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                        .addComponent(txt_agregarCorreo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlCrearCorreo1Layout.setVerticalGroup(
            pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearCorreo1Layout.createSequentialGroup()
                .addComponent(lbl_crear_correo1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCrearCorreo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_agregarCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnAgregarCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tbCrearContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/email.png")), pnlCrearCorreo1); // NOI18N

        javax.swing.GroupLayout pnlCrearContactoClienteLayout = new javax.swing.GroupLayout(pnlCrearContactoCliente);
        pnlCrearContactoCliente.setLayout(pnlCrearContactoClienteLayout);
        pnlCrearContactoClienteLayout.setHorizontalGroup(
            pnlCrearContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearContactoClienteLayout.createSequentialGroup()
                .addComponent(tbCrearContactoClientes)
                .addGap(10, 10, 10))
        );
        pnlCrearContactoClienteLayout.setVerticalGroup(
            pnlCrearContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCrearContactoClienteLayout.createSequentialGroup()
                .addComponent(tbCrearContactoClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        tbl_crear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "Primer Apellido", "Segundo Apellido", "Nombre", "Crédito", "Límite de Crédito", "Contactos", "Cod. Cliente", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_crear.getTableHeader().setReorderingAllowed(false);
        spnl_crear_clientes.setViewportView(tbl_crear);
        if (tbl_crear.getColumnModel().getColumnCount() > 0) {
            tbl_crear.getColumnModel().getColumn(0).setResizable(false);
            tbl_crear.getColumnModel().getColumn(1).setResizable(false);
            tbl_crear.getColumnModel().getColumn(2).setResizable(false);
            tbl_crear.getColumnModel().getColumn(3).setResizable(false);
            tbl_crear.getColumnModel().getColumn(5).setResizable(false);
            tbl_crear.getColumnModel().getColumn(6).setResizable(false);
            tbl_crear.getColumnModel().getColumn(7).setResizable(false);
        }

        btnCrearCliente.setText("Crear Cliente");
        btnCrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearClienteActionPerformed(evt);
            }
        });

        lbl_crear_provincia.setText("Provincia:");

        lbl_crear_canton.setText("Cantón:");

        lbl_crear_distrito.setText("Distrito:");

        lbl_crear_barrio.setText("Barrio:");

        lbl_crear_barrio1.setText("Otras señas:");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setAutoscrolls(true);

        txtaOtrasSenas.setColumns(3);
        txtaOtrasSenas.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtaOtrasSenas.setLineWrap(true);
        txtaOtrasSenas.setRows(3);
        txtaOtrasSenas.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txtaOtrasSenas);

        cbxProvincia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxProvinciaItemStateChanged(evt);
            }
        });
        cbxProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProvinciaActionPerformed(evt);
            }
        });

        cbxCanton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxCantonItemStateChanged(evt);
            }
        });
        cbxCanton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCantonActionPerformed(evt);
            }
        });

        cbxDistrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDistritoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_agregarLayout = new javax.swing.GroupLayout(pnl_agregar);
        pnl_agregar.setLayout(pnl_agregarLayout);
        pnl_agregarLayout.setHorizontalGroup(
            pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_agregarLayout.createSequentialGroup()
                .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCrearCliente))
                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spnl_crear_clientes, javax.swing.GroupLayout.DEFAULT_SIZE, 1149, Short.MAX_VALUE)
                            .addGroup(pnl_agregarLayout.createSequentialGroup()
                                .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lbl_crear_apellidoCliente2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                            .addComponent(lbl_crear_apellidoCliente1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(lbl_crear_nombreCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbl_crear_cedulaCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txt_crear_nombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                            .addComponent(txt_crear_cedulaCliente)
                                            .addComponent(txt_crear_apellidoCliente1)
                                            .addComponent(txt_crear_apellidoCliente2)))
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addComponent(pnl_crear_creditoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbl_crear_limiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_crear_limiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(58, 58, 58)
                                .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbl_crear_barrio1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addComponent(lbl_crear_provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxProvincia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addComponent(lbl_crear_canton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxCanton, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addComponent(lbl_crear_distrito, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxDistrito, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                                        .addComponent(lbl_crear_barrio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxBarrio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addComponent(pnlCrearContactoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24))
        );
        pnl_agregarLayout.setVerticalGroup(
            pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_agregarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCrearContactoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_crear_cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_crear_cedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_crear_nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_crear_apellidoCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_crear_apellidoCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_apellidoCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_crear_apellidoCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_agregarLayout.createSequentialGroup()
                                .addComponent(lbl_crear_limiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_crear_limiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnl_crear_creditoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_agregarLayout.createSequentialGroup()
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_canton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxCanton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_distrito, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_crear_barrio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxBarrio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_crear_barrio1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spnl_crear_clientes, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCrearCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        tb_modCliente.addTab("Agregar cliente", pnl_agregar);

        tbl_editar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "Primer Apellido", "Segundo Apellido", "Nombre", "Crédito", "Límite de Crédito", "Contactos", "Cod. Cliente", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_editar.getTableHeader().setReorderingAllowed(false);
        tbl_editar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_editarMouseClicked(evt);
            }
        });
        tbl_editar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_editarKeyReleased(evt);
            }
        });
        spnl_editar_clientes.setViewportView(tbl_editar);

        btnEditarCliente.setText("Guardar Cambios");
        btnEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarClienteActionPerformed(evt);
            }
        });

        tbEditarContactoClientes.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tbEditarContactoClientes.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        scpnlClientesEditarCliente.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlEditarTelefono.setRequestFocusEnabled(false);

        lblEditarCedulaCliente.setText("Cédula:");

        lblEditarNombreCliente.setText("Nombre:");

        pnlEditarCreditoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Crédito de Cliente:"));

        bg_editarCredito.add(rbEditarCreditoLim);
        rbEditarCreditoLim.setText("Crédito limitado");
        rbEditarCreditoLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarCreditoLimActionPerformed(evt);
            }
        });

        bg_editarCredito.add(rbEditarCredito);
        rbEditarCredito.setText("Crédito");
        rbEditarCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarCreditoActionPerformed(evt);
            }
        });

        bg_editarCredito.add(rbEditarSinCredito);
        rbEditarSinCredito.setText("Sin Crédito");
        rbEditarSinCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEditarSinCreditoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditarCreditoClienteLayout = new javax.swing.GroupLayout(pnlEditarCreditoCliente);
        pnlEditarCreditoCliente.setLayout(pnlEditarCreditoClienteLayout);
        pnlEditarCreditoClienteLayout.setHorizontalGroup(
            pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                        .addComponent(rbEditarCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(rbEditarCreditoLim)
                        .addGap(25, 25, 25))
                    .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                        .addComponent(rbEditarSinCredito)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlEditarCreditoClienteLayout.setVerticalGroup(
            pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCreditoClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEditarCreditoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEditarCredito)
                    .addComponent(rbEditarCreditoLim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEditarSinCredito))
        );

        lblEditarApellidoCliente.setText("Primer Apellido:");

        lblEditarSegundoApellido.setText("Segundo Apellido:");

        lblEditarLimiteCliente.setText("Límite de crédito:");

        txtEditarLimiteCliente.setEditable(false);

        javax.swing.GroupLayout pnlEditarTelefonoLayout = new javax.swing.GroupLayout(pnlEditarTelefono);
        pnlEditarTelefono.setLayout(pnlEditarTelefonoLayout);
        pnlEditarTelefonoLayout.setHorizontalGroup(
            pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarTelefonoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblEditarApellidoCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(lblEditarNombreCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEditarCedulaCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEditarSegundoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEditarCedulaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(txtEditarNombreCliente)
                    .addComponent(txtEditarPrimerApellido)
                    .addComponent(txtEditarSegundoApellido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 494, Short.MAX_VALUE)
                .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEditarCreditoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditarLimiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEditarLimiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(159, 159, 159))
        );
        pnlEditarTelefonoLayout.setVerticalGroup(
            pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarTelefonoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlEditarTelefonoLayout.createSequentialGroup()
                        .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEditarCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEditarNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEditarPrimerApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditarTelefonoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEditarSegundoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEditarSegundoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEditarTelefonoLayout.createSequentialGroup()
                        .addComponent(pnlEditarCreditoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEditarLimiteCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEditarLimiteCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        scpnlClientesEditarCliente.setViewportView(pnlEditarTelefono);

        tbEditarContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/cl_ed_cliente.png")), scpnlClientesEditarCliente); // NOI18N

        scpnlClientesEditarContacto.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlEditarContactoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacto:"));
        pnlEditarContactoCliente.setAutoscrolls(true);

        lblEditarTelefono.setText("Teléfono:");

        lblEditarCorreo.setText("Correo Electrónico:");

        btnEditarGuardarTel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/save.png"))); // NOI18N
        btnEditarGuardarTel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarGuardarTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarGuardarTelActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        scpnlEditarListaTelef.setViewportView(lsTelefonos);

        btnEditarCancelTel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cancel.png"))); // NOI18N
        btnEditarCancelTel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarCancelTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCancelTelActionPerformed(evt);
            }
        });

        lsCorreos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lsCorreos.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        scpnlEditarListaCorreo.setViewportView(lsCorreos);

        btnEditarGuardarCorreo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/save.png"))); // NOI18N
        btnEditarGuardarCorreo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarGuardarCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarGuardarCorreoActionPerformed(evt);
            }
        });

        btnEditarCancelCorreo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/cancel.png"))); // NOI18N
        btnEditarCancelCorreo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditarCancelCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCancelCorreoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditarContactoClienteLayout = new javax.swing.GroupLayout(pnlEditarContactoCliente);
        pnlEditarContactoCliente.setLayout(pnlEditarContactoClienteLayout);
        pnlEditarContactoClienteLayout.setHorizontalGroup(
            pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(txtEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarGuardarTel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarCancelTel))
                    .addComponent(scpnlEditarListaTelef, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(txtEditarCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarGuardarCorreo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarCancelCorreo))
                    .addComponent(scpnlEditarListaCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEditarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        pnlEditarContactoClienteLayout.setVerticalGroup(
            pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(lblEditarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scpnlEditarListaCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEditarCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnEditarGuardarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEditarCancelCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                        .addComponent(lblEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(scpnlEditarListaTelef, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlEditarContactoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtEditarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnEditarGuardarTel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEditarCancelTel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(pnlEditarContactoClienteLayout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlEditarCorreoLayout = new javax.swing.GroupLayout(pnlEditarCorreo);
        pnlEditarCorreo.setLayout(pnlEditarCorreoLayout);
        pnlEditarCorreoLayout.setHorizontalGroup(
            pnlEditarCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCorreoLayout.createSequentialGroup()
                .addComponent(pnlEditarContactoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlEditarCorreoLayout.setVerticalGroup(
            pnlEditarCorreoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditarCorreoLayout.createSequentialGroup()
                .addComponent(pnlEditarContactoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        scpnlClientesEditarContacto.setViewportView(pnlEditarCorreo);

        tbEditarContactoClientes.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/cl_ed_contacto.png")), scpnlClientesEditarContacto); // NOI18N

        javax.swing.GroupLayout pnl_actualizarLayout = new javax.swing.GroupLayout(pnl_actualizar);
        pnl_actualizar.setLayout(pnl_actualizarLayout);
        pnl_actualizarLayout.setHorizontalGroup(
            pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spnl_editar_clientes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1191, Short.MAX_VALUE)
            .addGroup(pnl_actualizarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbEditarContactoClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_actualizarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditarCliente)))
                .addContainerGap())
        );
        pnl_actualizarLayout.setVerticalGroup(
            pnl_actualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_actualizarLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(tbEditarContactoClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spnl_editar_clientes, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEditarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        tb_modCliente.addTab("Editar cliente", pnl_actualizar);

        lblDeshabSelectCliente.setText("Seleccionar Cliente:");

        tblClientesActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula", "Primer Apellido", "Segundo Apellido", "Nombre", "Crédito", "Límite de crédito", "Contacto", "Cod. Cliente", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientesActivos.getTableHeader().setReorderingAllowed(false);
        tblClientesActivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesActivosMouseClicked(evt);
            }
        });
        tblClientesActivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblClientesActivosKeyReleased(evt);
            }
        });
        scpnlClientesDeshab.setViewportView(tblClientesActivos);

        tbDeshab.addTab("Activos", scpnlClientesDeshab);

        tblClientesInactivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cédula ", "Primer Apellido", "Segundo Apellido", "Nombre", "Crédito", "Límite de crédito", "Contacto", "Cod. Cliente", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientesInactivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesInactivosMouseClicked(evt);
            }
        });
        tblClientesInactivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblClientesInactivosKeyReleased(evt);
            }
        });
        scpnlClientesHabilitar.setViewportView(tblClientesInactivos);

        tbDeshab.addTab("Inactivos", scpnlClientesHabilitar);

        pnlDeshabContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Activo:"));

        bg_crearHabilitar.add(rbDeshabDeshabCliente);
        rbDeshabDeshabCliente.setText("Deshabilitar");

        bg_crearHabilitar.add(rbDeshabHabilitarCliente);
        rbDeshabHabilitarCliente.setText("Habilitar");

        javax.swing.GroupLayout pnlDeshabContainerLayout = new javax.swing.GroupLayout(pnlDeshabContainer);
        pnlDeshabContainer.setLayout(pnlDeshabContainerLayout);
        pnlDeshabContainerLayout.setHorizontalGroup(
            pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeshabContainerLayout.createSequentialGroup()
                .addComponent(rbDeshabHabilitarCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(rbDeshabDeshabCliente)
                .addContainerGap())
        );
        pnlDeshabContainerLayout.setVerticalGroup(
            pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDeshabContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDeshabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDeshabHabilitarCliente)
                    .addComponent(rbDeshabDeshabCliente)))
        );

        btn_deshabilitar.setText("Guardar Cambios");
        btn_deshabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deshabilitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHabilitarLayout = new javax.swing.GroupLayout(pnlHabilitar);
        pnlHabilitar.setLayout(pnlHabilitarLayout);
        pnlHabilitarLayout.setHorizontalGroup(
            pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHabilitarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addComponent(lblDeshabSelectCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 970, Short.MAX_VALUE))
                    .addComponent(tbDeshab, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(pnlDeshabContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_deshabilitar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlHabilitarLayout.setVerticalGroup(
            pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHabilitarLayout.createSequentialGroup()
                .addGroup(pnlHabilitarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_deshabilitar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHabilitarLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lblDeshabSelectCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbDeshab, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlDeshabContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );

        tb_modCliente.addTab("Habilitar clientes", pnlHabilitar);

        javax.swing.GroupLayout pnl_modClienteLayout = new javax.swing.GroupLayout(pnl_modCliente);
        pnl_modCliente.setLayout(pnl_modClienteLayout);
        pnl_modClienteLayout.setHorizontalGroup(
            pnl_modClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_modClienteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tb_modCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 1199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnl_modClienteLayout.setVerticalGroup(
            pnl_modClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_modClienteLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(tb_modCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_modCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_modCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Para todas las tablas en la interfaz, llama el método que carga una tabla 
     * con la información de los clientes.
     */
    public void cargarTablas() {
        //usuarios.clear();
        clientes = controlador.obtenerClientes();
        cargarClientesJTable(tbListadoCliente, true);
        cargarClientesJTable(tbl_crear, true);
        cargarClientesJTable(tbl_editar, true);
        cargarClientesJTable(tblClientesActivos, true);
        cargarClientesJTable(tblClientesInactivos, false);
    }
    
    /**
     * Limpia los elementos en la interfaz.
     * @param panel
     */
    public void limpiarCampos(String panel) {
        switch (panel.toUpperCase()) {
            case "CREAR":
                txt_crear_apellidoCliente1.setText("");
                txt_crear_apellidoCliente2.setText("");
                txt_crear_cedulaCliente.setText("");
                txt_crear_limiteCliente.setText("");
                txt_crear_nombreCliente.setText("");
                lsCrearTelefonos.removeAll();
                lsCrearCorreos.removeAll();
                break;
            case "EDITAR":
                txtEditarPrimerApellido.setText("");
                txtEditarSegundoApellido.setText("");
                txtEditarCedulaCliente.setText("");
                txtEditarLimiteCliente.setText("");
                txtEditarNombreCliente.setText("");
                lsTelefonos.removeAll();
                lsCorreos.removeAll();
                break;
            default:
                throw new AssertionError();
        }
    }
    
    /**
     * Carga/llena una de la interfaz con la información de 
     * los clientes.
     * @param tabla Tabla a llenar
     * @param estado Indica si el cliente está o no inactivo
     */
    public void cargarClientesJTable(JTable tabla, boolean estado) {
        Object[] row = new Object[10];
        model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
        model.setColumnCount(10);
        int i = 0;
        for (Cliente c: clientes) {

            if (c.getEstado().equals(Estado.Activo) && estado) {
                
                row[0] = c.getCedula();
                row[1] = c.getApellido1(); 
                row[2] = c.getApellido2();
                row[3] = c.getNombre();
                row[4] = c.isAprobarCredito() ? "✔" : "✘";
                row[5] = "₡ " + c.getLimiteCredito();
                
                ArrayList<Contacto> contactos = c.getContactos();
                
                String texto = "<html><body>";
                for (Contacto ct: contactos) {
                    String tipo = ct.getTipo().equals(TipoContacto.CORREO) ? "✉" : "✆";
                    texto += tipo + " " + ct.getInfo() + "<br>";
                }
                texto += "</body></html>";
                row[6] = texto;
                
                String dir = "<html><body>" +
                        c.getDireccion().getNomProvincia() + ",<br>" +
                        c.getDireccion().getNomCanton() + ",<br>" +
                        c.getDireccion().getNomDistrito() + ",<br>" +
                        c.getDireccion().getNomBarrio() 
                        + "</body></html>";
                
                row[7] = dir;
                row[8] = c.getCodCliente(); //codigo de cliente
                row[9] = c.getCodigo(); //codigo de persona
                
                model.addRow(row);
                
                tabla.setRowHeight(i, contactos.size() > 0 ? 
                        contactos.size()*20 : tabla.getRowHeight(i));
                
                i++;
            }
            if (c.getEstado().equals(Estado.Deshabilitado) && !estado) {
                
                row[0] = c.getCedula();
                row[1] = c.getApellido1(); 
                row[2] = c.getApellido2();
                row[3] = c.getNombre();
                row[4] = c.isAprobarCredito() ? "✔" : "✘";
                row[5] = "₡ " + c.getLimiteCredito();
                
                ArrayList<Contacto> contactos = c.getContactos();
                
                String texto = "<html><body>";
                for (Contacto ct: contactos) {
                    String tipo = ct.getTipo().equals(TipoContacto.CORREO) ? "✉" : "✆";
                    texto += tipo + " " + ct.getInfo() + "<br>";
                }
                texto += "</body></html>";
                row[6] = texto;
                
                String dir = "<html><body>" +
                        c.getDireccion().getNomProvincia() + ",<br>" +
                        c.getDireccion().getNomCanton() + ",<br>" +
                        c.getDireccion().getNomDistrito() + ",<br>" +
                        c.getDireccion().getNomBarrio() 
                        + "</body></html>";
                
                row[7] = dir;
                row[8] = c.getCodCliente(); //codigo de cliente
                row[9] = c.getCodigo(); //codigo de persona
                
                model.addRow(row);
                
                tabla.setRowHeight(i, contactos.size() > 0 ? 
                        contactos.size()*20 : tabla.getRowHeight(i));
                
                i++;
            }
        }
        
        tabla.removeColumn(tabla.getColumnModel().getColumn(8));
        tabla.removeColumn(tabla.getColumnModel().getColumn(8));
    }
    
    public void cargarDireccion(String campo, String codP, String codC, 
            String codD, JComboBox combo) {
        
        combo.removeAllItems();
        
        ArrayList<DirFiltro> listaLugares = ctrDireccion.filtrarDireccion(campo,
                codP, codC, codD);
        for(int i = 0; i < listaLugares.size(); i++) {
            combo.addItem(listaLugares.get(i));
        }
    }
    /**
     * Crea un nuevo cliente en la BD con la información enviada por parámetro.
     * @param nombre nombre del cliente
     * @param apellido1 primer apellido del cliente
     * @param apellido2 segundo apellido del cliente
     * @param cedula cedula del cliente
     * @param limiteCred límite de crédito asignado
     * @param aprobarCred si tiene o no crédito permitido
     * @param contactos contactos del cliente
     */
    private void agregarCliente(String nombre, String apellido1, 
            String apellido2, String cedula, String limiteCred, 
            boolean aprobarCred, String codProv, String nomProv, 
            String codCanton, String nomCanton, String codDistrito, 
            String nomDistrito, String codBarrio, String nomBarrio, String senas, 
            ArrayList<ArrayList<Object>> contactos) {
          
        if (!nombre.isEmpty() && !apellido1.isEmpty() && !apellido2.isEmpty() &&
              !codProv.isEmpty() && !codCanton.isEmpty() && 
              !codDistrito.isEmpty() && !codBarrio.isEmpty()) {
//            if (verificacion.validaNombre(nombre) && 
//                    verificacion.validaNombre(apellido1) && 
//                    verificacion.validaNombre(apellido2)) {

                double limiteCredito;
                try {
                    limiteCredito = Double.valueOf(limiteCred);
                    System.out.println(limiteCredito);
                    
                    Direccion dir = new Direccion(1, codProv, nomProv, 
                            codCanton, nomCanton, codDistrito, nomDistrito, 
                            codBarrio, nomBarrio, senas);
                    
                    boolean creado = controlador.crearCliente(nombre, apellido1, 
                            apellido2, cedula, limiteCredito, aprobarCred, dir,
                            contactos);
                    
                    if (creado) {
                        msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE, 
                        TipoMensaje.CUSTOMER_INSERTION_SUCCESS);
                        
                        cargarTablas();
                    } else {
                        msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                        TipoMensaje.CUSTOMER_INSERTION_FAILURE);
                    }
                } catch (NumberFormatException ex) {
                    msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.NUMBER_FORMAT_EXCEPTION);
                } catch (Exception ex) {
                    msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.SOMETHING_WENT_WRONG);
                }
//            } else {
//                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
//                    TipoMensaje.WRONG_CUSTOMER_FIELDS);
//            }
        } else {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.EMPTY_CUSTOMER_FIELDS);
        }
    }
    
    /**
     * Actualiza la información de los clientes.
     * @param nombre nombre del cliente
     * @param apellido1 primer apellido del cliente
     * @param apellido2 segundo apellido del cliente
     * @param cedula cedula del cliente
     * @param limiteCred límite de crédito asignado 
     * @param aprobarCred si tiene o no crédito permitido
     * @param codPersona codigo de persona para enlazar en la tabla de la BD
     */
    private void actualizarCliente(String nombre, String apellido1, 
            String apellido2, String cedula, String limiteCred, 
            boolean aprobarCred, String codPersona) {
        
        if (!nombre.isEmpty() && !apellido1.isEmpty() && !apellido2.isEmpty()) {
//            if (verificacion.validaNombre(nombre) && 
//                    verificacion.validaNombre(apellido1) && 
//                    verificacion.validaNombre(apellido2)) {

                double limiteCredito;
                try {
                    limiteCredito = Double.valueOf(limiteCred);

                    boolean actualizado = controlador.actualizarCliente(nombre, 
                            apellido1, apellido2, cedula, limiteCredito, 
                            aprobarCred, codPersona);

                    if (actualizado) {
                        System.out.println("Yay!");
                        cargarTablas();
                        
                        txtEditarCedulaCliente.setText("");
                        txtEditarCorreoCliente.setText("");
                        txtEditarLimiteCliente.setText("");
                        txtEditarNombreCliente.setText("");
                        txtEditarPrimerApellido.setText("");
                        txtEditarSegundoApellido.setText("");
                        txtEditarTelefono.setText("");
                        
                        lsCorreos.setModel(new DefaultListModel());
                        lsCorreos.setModel(new DefaultListModel());
                    } else {
                        System.out.println("Yaq!");
                    }
                } catch (NumberFormatException ex) {
                    System.err.println(ex);
                } catch (Exception ex) {
                    System.err.println(ex);
                }
            } else {

            }
//        } else {
//            
//        }
    }
    
    /**
     * Carga los campos elementos de Editar clientes cuando se selecciona uno
     * @param cliente información del cliente a cargar
     */
    private void cargarEditarCliente(Cliente cliente) {
        txtEditarCedulaCliente.setText(cliente.getCedula());
        txtEditarNombreCliente.setText(cliente.getNombre());
        txtEditarPrimerApellido.setText(cliente.getApellido1());
        txtEditarSegundoApellido.setText(cliente.getApellido2());
        
        if (cliente.isAprobarCredito()) {
            if (cliente.getLimiteCredito() > 0.0) {
                rbEditarCreditoLim.setSelected(true);
                txtEditarLimiteCliente.setText(String.valueOf(cliente.getLimiteCredito()));
                txtEditarLimiteCliente.setEditable(true);
            } else {
                rbEditarCredito.setSelected(true);
                txtEditarLimiteCliente.setText(String.valueOf(cliente.getLimiteCredito()));
            }
            System.out.println(cliente.getLimiteCredito());
        } else {
            rbEditarSinCredito.setSelected(true);
            txtEditarLimiteCliente.setText("");
        }
        
        editarTelefonos = new ArrayList<>();
        editarCorreos = new ArrayList<>();
        DefaultListModel<String> mTelefonos = new DefaultListModel<>();
        DefaultListModel<String> mCorreos = new DefaultListModel<>();
        
        for (Contacto ct: cliente.getContactos()) {
            if (ct.getTipo().equals(TipoContacto.CORREO)) {
                editarCorreos.add(ct);
                mCorreos.addElement(ct.getInfo());
            } else {
                if (ct.getTipo().equals(TipoContacto.TELEFONO)) {
                    editarTelefonos.add(ct);
                    mTelefonos.addElement(ct.getInfo());
                }
            }
        }
        lsTelefonos.setModel(mTelefonos);
        lsCorreos.setModel(mCorreos);
    }
    
    private void btnCrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearClienteActionPerformed
        ArrayList<ArrayList<Object>> contactos = new ArrayList<>();
        ArrayList<Object> correo;
        for (int i=0; i<lsCrearCorreos.getModel().getSize(); i++) {
            correo = new ArrayList<>();
            correo.add(TipoContacto.CORREO);
            correo.add(lsCrearCorreos.getModel().getElementAt(i));
            contactos.add(correo);
        }
        
        ArrayList<Object> telefono;
        for (int i=0; i<lsCrearTelefonos.getModel().getSize(); i++) {
            telefono = new ArrayList<>();
            telefono.add(TipoContacto.TELEFONO);
            telefono.add(lsCrearTelefonos.getModel().getElementAt(i));
            contactos.add(telefono);
        }
        
        boolean credito = rbCrearCredito.isSelected() || 
                rbCrearCreditoLim.isSelected();
        String limiteCred = txt_crear_limiteCliente.getText().trim().isEmpty() ? 
                "0" : txt_crear_limiteCliente.getText().trim();
        
        // Obtener infor de la dirección
        String cP = String.valueOf(cbxProvincia.getItemAt(cbxProvincia.getSelectedIndex()).getCodigo());
        String nP = String.valueOf(cbxProvincia.getItemAt(cbxProvincia.getSelectedIndex()).getNombre());
        String cC = String.valueOf(cbxCanton.getItemAt(cbxCanton.getSelectedIndex()).getCodigo());
        String nC = String.valueOf(cbxCanton.getItemAt(cbxCanton.getSelectedIndex()).getNombre());
        String cD = String.valueOf(cbxDistrito.getItemAt(cbxDistrito.getSelectedIndex()).getCodigo());
        String nD = String.valueOf(cbxDistrito.getItemAt(cbxDistrito.getSelectedIndex()).getNombre());
        String cB = String.valueOf(cbxBarrio.getItemAt(cbxBarrio.getSelectedIndex()).getCodigo());
        String nB = String.valueOf(cbxBarrio.getItemAt(cbxBarrio.getSelectedIndex()).getNombre());
        String senas = txtaOtrasSenas.getText();
        
        agregarCliente(txt_crear_nombreCliente.getText().trim(), 
                txt_crear_apellidoCliente1.getText().trim(), 
                txt_crear_apellidoCliente2.getText().trim(), 
                txt_crear_cedulaCliente.getText().trim(), 
                limiteCred, credito, cP, nP, cC, nC, cD, nD, cB, nB, senas, 
                contactos);
        
        limpiarCampos("CREAR");
    }//GEN-LAST:event_btnCrearClienteActionPerformed

    private void btnEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarClienteActionPerformed
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int indiceFila = tbl_editar.getSelectedRow();
            
            boolean credito = rbEditarCredito.isSelected() || 
                    rbEditarCreditoLim.isSelected();
            String limiteCred = txtEditarLimiteCliente.getText().trim().isEmpty() 
                    || rbEditarCredito.isSelected() ? 
                    "0.0" : txtEditarLimiteCliente.getText().trim();
            
            String codPersona = (String) model.getValueAt(indiceFila, 8);
            System.out.println("CODIGO PER: "+codPersona);
            
            actualizarCliente(txtEditarNombreCliente.getText().trim(), 
                    txtEditarPrimerApellido.getText().trim(), 
                    txtEditarSegundoApellido.getText().trim(), 
                    txtEditarCedulaCliente.getText().trim(), 
                    limiteCred, credito, codPersona);
        } catch (ArrayIndexOutOfBoundsException ex) {
            ex.printStackTrace();
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        limpiarCampos("EDITAR");
    }//GEN-LAST:event_btnEditarClienteActionPerformed

    private void tblClientesActivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesActivosMouseClicked
        try {
            model = (DefaultTableModel) tblClientesActivos.getModel();
            int selectedRowIndex = tblClientesActivos.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    //Si el codigo coincide
                    if (clientes.get(i).getEstado().equals(Estado.Activo)) {
                        //Verifica el tipo de estado
                        rbDeshabDeshabCliente.setSelected(true);
                    } else {
                        rbDeshabHabilitarCliente.setSelected(true);
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_tblClientesActivosMouseClicked

    private void tblClientesActivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesActivosKeyReleased
        try {
            if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) {
                model = (DefaultTableModel) tblClientesActivos.getModel();
                int selectedRowIndex = tblClientesActivos.getSelectedRow();
                String cedula
                = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

                for (int i = 0; i < clientes.size(); i++) {
                    if (clientes.get(i).getCedula().equals(cedula)) {
                        //Si el codigo coincide
                        if (clientes.get(i).getEstado().equals(Estado.Activo)) {
                            //Verifica el tipo de estado
                            rbDeshabDeshabCliente.setSelected(true);
                        } else {
                            rbDeshabHabilitarCliente.setSelected(true);
                        }
                    }
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_tblClientesActivosKeyReleased

    private void tblClientesInactivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesInactivosMouseClicked
        try {
            model = (DefaultTableModel) tblClientesInactivos.getModel();
            int selectedRowIndex = tblClientesInactivos.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    //Si el codigo coincide
                    if (clientes.get(i).getEstado().equals(Estado.Deshabilitado)) {
                        //Verifica el tipo de estado
                        rbDeshabHabilitarCliente.setSelected(true);
                    } else {
                        rbDeshabDeshabCliente.setSelected(true);
                    }
                }
            }
        } catch (NullPointerException ex){
            
        } catch (ArrayIndexOutOfBoundsException ex) {
            
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_tblClientesInactivosMouseClicked

    private void tblClientesInactivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesInactivosKeyReleased
        try {
            if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) {
                model = (DefaultTableModel) tblClientesInactivos.getModel();
                int selectedRowIndex = tblClientesInactivos.getSelectedRow();
                String cedula
                = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

                for (int i = 0; i < clientes.size(); i++) {
                    if (clientes.get(i).getCedula().equals(cedula)) {
                        if (clientes.get(i).getEstado().equals(Estado.Deshabilitado)) {
                            rbDeshabHabilitarCliente.setSelected(true);
                        } else {
                            rbDeshabDeshabCliente.setSelected(true);
                        }
                    }
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_tblClientesInactivosKeyReleased

    private void btn_deshabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deshabilitarActionPerformed
        try {
            
            model = tbDeshab.getSelectedIndex() == 0 ? 
                    (DefaultTableModel) tblClientesActivos.getModel() : 
                    (DefaultTableModel) tblClientesInactivos.getModel();
            
            int selectedRowIndex = tbDeshab.getSelectedIndex() == 0 ? 
                    tblClientesActivos.getSelectedRow() : 
                    tblClientesInactivos.getSelectedRow();
            
            Estado estado
                    = rbDeshabHabilitarCliente.isSelected() ? Estado.Activo : Estado.Deshabilitado;
            
            if (estado.equals(Estado.Deshabilitado)) {
                controlador.inactivarCliente(model.getValueAt(selectedRowIndex, 0).toString());
            } else {
                controlador.activarCliente(model.getValueAt(selectedRowIndex, 0).toString());
            }
            //Actualizar
            cargarTablas();
        } catch (Exception e) {
            e.printStackTrace();
//            msg.mostrarMensaje(JOptionPane.INFORMATION_MESSAGE,
//                    TipoMensaje.ANY_ROW_SELECTED);
        }
    }//GEN-LAST:event_btn_deshabilitarActionPerformed

    private void btnEditarGuardarTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarGuardarTelActionPerformed
        String telefono = txtEditarTelefono.getText().trim();
        
        try {
            if (verificacion.validaTelefono(telefono)) {// && !editarTelefonos.contains(telefono)) {
                
                int indice = tbl_editar.getSelectedRow();
                String cedula = tbl_editar.getModel().getValueAt(indice, 0).toString();
                for (Cliente c: clientes) {
                    if (c.getCedula().equals(cedula)) {
                        controlador.crearContacto(TipoContacto.TELEFONO, telefono, c.getCodigo());
                        editarTelefonos = new ArrayList<>();
                        for (Contacto ct: controlador.obtenerContactos(c.getCodigo())) {
                            if (ct.getTipo().equals(TipoContacto.TELEFONO)) {
                                editarTelefonos.add(ct);
                                
                                DefaultListModel<String> m = new DefaultListModel<>();
                                for (int i=0; i<editarTelefonos.size(); i++) {
                                    m.addElement(editarTelefonos.get(i).getInfo());
                                }
                                lsTelefonos.setModel(m);
                                txtEditarTelefono.setText("");
                            }
                        }
                    }
                }
            } else {
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                        TipoMensaje.PHONE_SYNTAX_FAILURE);
            }
        }catch (NullPointerException ex) {
            
        } catch (Exception ex) {
                
        } finally {
            cargarTablas();
        }
    }//GEN-LAST:event_btnEditarGuardarTelActionPerformed

    private void txtListadoClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtListadoClienteKeyReleased
        clientes = controlador.consultarClientes(txtListadoCliente.getText().trim());
        cargarClientesJTable(tbListadoCliente, true);
    }//GEN-LAST:event_txtListadoClienteKeyReleased

    private void btnEditarCancelTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCancelTelActionPerformed
        try {
            int indice = lsTelefonos.getSelectedIndex();            
            controlador.inactivarContacto(editarTelefonos.get(indice).getCodigo());
            editarTelefonos.remove(indice);
            
            DefaultListModel<String> m = new DefaultListModel<>();
            for (int i=0; i<editarTelefonos.size(); i++) {
                m.addElement(editarTelefonos.get(i).getInfo());
            }
            lsTelefonos.setModel(m);
        } catch(NullPointerException ex) {
            
        } catch (ArrayIndexOutOfBoundsException ex) {
            
        } catch (Exception ex) {
            
        } finally {
            cargarTablas();
        }
    }//GEN-LAST:event_btnEditarCancelTelActionPerformed

    private void btnEditarGuardarCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarGuardarCorreoActionPerformed
        //msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, null);
        String correo = txtEditarCorreoCliente.getText().trim();
        int indice = 0;
        try {
            if (verificacion.validaEmail(correo)) {
            
                indice = tbl_editar.getSelectedRow();
                String cedula = tbl_editar.getModel().getValueAt(indice, 0).toString();
                for (Cliente c: clientes) {
                    if (c.getCedula().equals(cedula)) {
                        controlador.crearContacto(TipoContacto.CORREO, correo, c.getCodigo());
                        editarCorreos = new ArrayList<>();
                        for (Contacto ct: controlador.obtenerContactos(c.getCodigo())) {
                            if (ct.getTipo().equals(TipoContacto.CORREO)) {
                                editarCorreos.add(ct);
                                
                                DefaultListModel<String> m = new DefaultListModel<>();
                                for (int i=0; i<editarCorreos.size(); i++) {
                                    m.addElement(editarCorreos.get(i).getInfo());
                                }
                                lsCorreos.setModel(m);
                                txtEditarCorreoCliente.setText("");
                            }
                        }
                    }
                }
            } else {
                msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                        TipoMensaje.EMAIL_SYNTAX_FAILURE);
            }
        } catch (NullPointerException ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        } catch (Exception ex) {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, null);
        } finally {
            cargarTablas();
            tbl_editar.setRowSelectionInterval(indice, indice);
        }
    }//GEN-LAST:event_btnEditarGuardarCorreoActionPerformed

    private void btnEditarCancelCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCancelCorreoActionPerformed
        int indice = 0;
        try {
            indice = lsCorreos.getSelectedIndex();
            controlador.inactivarContacto(editarCorreos.get(indice).getCodigo());
            editarCorreos.remove(indice);
            
            DefaultListModel<String> m = new DefaultListModel<>();
            for (int i=0; i<editarCorreos.size(); i++) {
                m.addElement(editarCorreos.get(i).getInfo());
            }
            lsCorreos.setModel(m);
        } catch(NullPointerException ex) {
            
        } catch (ArrayIndexOutOfBoundsException ex) {
            
        } catch (Exception ex) {
            
        } finally {
            cargarTablas();
            tbl_editar.setRowSelectionInterval(indice, indice);
        }
    }//GEN-LAST:event_btnEditarCancelCorreoActionPerformed

    private void btnAgregarCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCorreoActionPerformed
        String correo = txt_agregarCorreo.getText().trim();
        
        if (verificacion.validaEmail(correo) && !crearCorreos.contains(correo)) {
            crearCorreos.add(correo);
            DefaultListModel<String> m = new DefaultListModel<>();
            for (int i=0; i<crearCorreos.size(); i++) {
                m.addElement(crearCorreos.get(i));
            }
            lsCrearCorreos.setModel(m);
        } else {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.EMAIL_SYNTAX_FAILURE);
        }
        txt_agregarCorreo.setText("");
    }//GEN-LAST:event_btnAgregarCorreoActionPerformed

    private void btnAgregarTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTelefonoActionPerformed
        String telefono = txt_agregarTelefono.getText().trim();
        
        if (verificacion.validaTelefono(telefono) && !crearTelefonos.contains(telefono)) {
            crearTelefonos.add(telefono);
            DefaultListModel<String> m = new DefaultListModel<>();
            for (int i=0; i<crearTelefonos.size(); i++) {
                m.addElement(crearTelefonos.get(i));
            }
            lsCrearTelefonos.setModel(m);
        } else {
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, 
                    TipoMensaje.PHONE_SYNTAX_FAILURE);
        }
        
        txt_agregarTelefono.setText("");
    }//GEN-LAST:event_btnAgregarTelefonoActionPerformed

    private void rbCrearCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearCreditoActionPerformed
        txt_crear_limiteCliente.setText("0");
        txt_crear_limiteCliente.setEditable(false);
    }//GEN-LAST:event_rbCrearCreditoActionPerformed

    private void rbCrearCreditoLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearCreditoLimActionPerformed
        txt_crear_limiteCliente.setText("");
        txt_crear_limiteCliente.setEditable(true);
    }//GEN-LAST:event_rbCrearCreditoLimActionPerformed

    private void rbCrearSinCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrearSinCreditoActionPerformed
        txt_crear_limiteCliente.setText("");
        txt_crear_limiteCliente.setEditable(false);
    }//GEN-LAST:event_rbCrearSinCreditoActionPerformed

    private void tbl_editarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_editarMouseClicked
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int selectedRowIndex = tbl_editar.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    cargarEditarCliente(clientes.get(i));
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_tbl_editarMouseClicked

    private void tbl_editarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_editarKeyReleased
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int selectedRowIndex = tbl_editar.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    cargarEditarCliente(clientes.get(i));
                }
            }
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_tbl_editarKeyReleased

    private void itEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itEditarActionPerformed
        try {
            model = (DefaultTableModel) tbListadoCliente.getModel();
            int selectedRowIndex = tbListadoCliente.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    cargarEditarCliente(clientes.get(i));
                }
            }
            tb_modCliente.setSelectedIndex(2);
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_itEditarActionPerformed

    private void rbEditarCreditoLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarCreditoLimActionPerformed
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int selectedRowIndex = tbl_editar.getSelectedRow();
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());

            float limCred = 0;
            for (int i = 0; i < clientes.size(); i++) {
                if (clientes.get(i).getCedula().equals(cedula)) {
                    limCred = clientes.get(i).getLimiteCredito();
                }
            }
            
            txtEditarLimiteCliente.setText(String.valueOf(limCred));
            txtEditarLimiteCliente.setEditable(true);
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_rbEditarCreditoLimActionPerformed

    private void rbEditarCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarCreditoActionPerformed
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int selectedRowIndex = tbl_editar.getSelectedRow();
            
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());
            
            txtEditarLimiteCliente.setText("0.0");
            txtEditarLimiteCliente.setEditable(false);
            
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_rbEditarCreditoActionPerformed

    private void rbEditarSinCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEditarSinCreditoActionPerformed
        try {
            model = (DefaultTableModel) tbl_editar.getModel();
            int selectedRowIndex = tbl_editar.getSelectedRow();
            
            String cedula
            = String.valueOf(model.getValueAt(selectedRowIndex, 0).toString());
            
            txtEditarLimiteCliente.setText("");
            txtEditarLimiteCliente.setEditable(false);
        } catch (ArrayIndexOutOfBoundsException | NullPointerException ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.ANY_ROW_SELECTED);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            msg.mostrarMensaje(JOptionPane.ERROR_MESSAGE, TipoMensaje.SOMETHING_WENT_WRONG);
        }
    }//GEN-LAST:event_rbEditarSinCreditoActionPerformed

    private void cbxProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProvinciaActionPerformed
        String codP = cbxProvincia.getItemAt(
                cbxProvincia.getSelectedIndex()).getCodigo();
        cargarDireccion("C", codP, "", "", cbxCanton);
    }//GEN-LAST:event_cbxProvinciaActionPerformed

    private void cbxCantonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCantonActionPerformed
        if(cbxCanton.getItemCount() > 0) {
            String codP = cbxProvincia.getItemAt(
                cbxProvincia.getSelectedIndex()).getCodigo();
            String codC = cbxCanton.getItemAt(
                cbxCanton.getSelectedIndex()).getCodigo();
            cargarDireccion("D", codP, codC, "", cbxDistrito);
        }
    }//GEN-LAST:event_cbxCantonActionPerformed

    private void cbxDistritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDistritoActionPerformed
        if(cbxDistrito.getItemCount() > 0) {
            String codP = cbxProvincia.getItemAt(
                cbxProvincia.getSelectedIndex()).getCodigo();
            String codC = cbxCanton.getItemAt(
                cbxCanton.getSelectedIndex()).getCodigo();
            String codD = cbxDistrito.getItemAt(
                cbxDistrito.getSelectedIndex()).getCodigo();
            cargarDireccion("B", codP, codC, codD, cbxBarrio);
        }
    }//GEN-LAST:event_cbxDistritoActionPerformed

    private void cbxProvinciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxProvinciaItemStateChanged
        
    }//GEN-LAST:event_cbxProvinciaItemStateChanged

    private void cbxCantonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxCantonItemStateChanged
        
        
        
    }//GEN-LAST:event_cbxCantonItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_crearCredito;
    private javax.swing.ButtonGroup bg_crearHabilitar;
    private javax.swing.ButtonGroup bg_editarCredito;
    private javax.swing.JButton btnAgregarCorreo;
    private javax.swing.JButton btnAgregarTelefono;
    private javax.swing.JButton btnCrearCliente;
    private javax.swing.JButton btnEditarCancelCorreo;
    private javax.swing.JButton btnEditarCancelTel;
    private javax.swing.JButton btnEditarCliente;
    private javax.swing.JButton btnEditarGuardarCorreo;
    private javax.swing.JButton btnEditarGuardarTel;
    private javax.swing.JButton btn_deshabilitar;
    private javax.swing.JComboBox<DirFiltro> cbxBarrio;
    private javax.swing.JComboBox<DirFiltro> cbxCanton;
    private javax.swing.JComboBox<DirFiltro> cbxDistrito;
    private javax.swing.JComboBox<DirFiltro> cbxProvincia;
    private javax.swing.JMenuItem itEditar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCrearTelefono;
    private javax.swing.JLabel lblDeshabSelectCliente;
    private javax.swing.JLabel lblEditarApellidoCliente;
    private javax.swing.JLabel lblEditarCedulaCliente;
    private javax.swing.JLabel lblEditarCorreo;
    private javax.swing.JLabel lblEditarLimiteCliente;
    private javax.swing.JLabel lblEditarNombreCliente;
    private javax.swing.JLabel lblEditarSegundoApellido;
    private javax.swing.JLabel lblEditarTelefono;
    private javax.swing.JLabel lblListadoCliente;
    private javax.swing.JLabel lbl_crear_apellidoCliente1;
    private javax.swing.JLabel lbl_crear_apellidoCliente2;
    private javax.swing.JLabel lbl_crear_barrio;
    private javax.swing.JLabel lbl_crear_barrio1;
    private javax.swing.JLabel lbl_crear_canton;
    private javax.swing.JLabel lbl_crear_cedulaCliente;
    private javax.swing.JLabel lbl_crear_correo1;
    private javax.swing.JLabel lbl_crear_distrito;
    private javax.swing.JLabel lbl_crear_limiteCliente;
    private javax.swing.JLabel lbl_crear_nombreCliente;
    private javax.swing.JLabel lbl_crear_provincia;
    private javax.swing.JList<String> lsCorreos;
    private javax.swing.JList<String> lsCrearCorreos;
    private javax.swing.JList<String> lsCrearTelefonos;
    private javax.swing.JList<String> lsTelefonos;
    private javax.swing.JPopupMenu menuEmergente;
    private javax.swing.JPanel pnlCrearContactoCliente;
    private javax.swing.JPanel pnlCrearCorreo1;
    private javax.swing.JPanel pnlCrearTelefono;
    private javax.swing.JPanel pnlDeshabContainer;
    private javax.swing.JPanel pnlEditarContactoCliente;
    private javax.swing.JPanel pnlEditarCorreo;
    private javax.swing.JPanel pnlEditarCreditoCliente;
    private javax.swing.JPanel pnlEditarTelefono;
    private javax.swing.JPanel pnlHabilitar;
    private javax.swing.JPanel pnl_actualizar;
    private javax.swing.JPanel pnl_agregar;
    private javax.swing.JPanel pnl_crear_creditoCliente;
    private javax.swing.JPanel pnl_listado;
    private javax.swing.JPanel pnl_modCliente;
    private javax.swing.JRadioButton rbCrearCredito;
    private javax.swing.JRadioButton rbCrearCreditoLim;
    private javax.swing.JRadioButton rbCrearSinCredito;
    private javax.swing.JRadioButton rbDeshabDeshabCliente;
    private javax.swing.JRadioButton rbDeshabHabilitarCliente;
    private javax.swing.JRadioButton rbEditarCredito;
    private javax.swing.JRadioButton rbEditarCreditoLim;
    private javax.swing.JRadioButton rbEditarSinCredito;
    private javax.swing.JScrollPane scpnlClientesCrearTelefono;
    private javax.swing.JScrollPane scpnlClientesDeshab;
    private javax.swing.JScrollPane scpnlClientesEditarCliente;
    private javax.swing.JScrollPane scpnlClientesEditarContacto;
    private javax.swing.JScrollPane scpnlClientesHabilitar;
    private javax.swing.JScrollPane scpnlEditarListaCorreo;
    private javax.swing.JScrollPane scpnlEditarListaTelef;
    private javax.swing.JScrollPane scpnlTblListadoCliente;
    private javax.swing.JScrollPane spnl_crear_clientes;
    private javax.swing.JScrollPane spnl_editar_clientes;
    private javax.swing.JTabbedPane tbCrearContactoClientes;
    private javax.swing.JTabbedPane tbDeshab;
    private javax.swing.JTabbedPane tbEditarContactoClientes;
    private javax.swing.JTable tbListadoCliente;
    private javax.swing.JTabbedPane tb_modCliente;
    private javax.swing.JTable tblClientesActivos;
    private javax.swing.JTable tblClientesInactivos;
    private javax.swing.JTable tbl_crear;
    private javax.swing.JTable tbl_editar;
    private javax.swing.JTextField txtEditarCedulaCliente;
    private javax.swing.JTextField txtEditarCorreoCliente;
    private javax.swing.JTextField txtEditarLimiteCliente;
    private javax.swing.JTextField txtEditarNombreCliente;
    private javax.swing.JTextField txtEditarPrimerApellido;
    private javax.swing.JTextField txtEditarSegundoApellido;
    private javax.swing.JTextField txtEditarTelefono;
    private javax.swing.JTextField txtListadoCliente;
    private javax.swing.JTextField txt_agregarCorreo;
    private javax.swing.JTextField txt_agregarTelefono;
    private javax.swing.JTextField txt_crear_apellidoCliente1;
    private javax.swing.JTextField txt_crear_apellidoCliente2;
    private javax.swing.JTextField txt_crear_cedulaCliente;
    private javax.swing.JTextField txt_crear_limiteCliente;
    private javax.swing.JTextField txt_crear_nombreCliente;
    private javax.swing.JTextArea txtaOtrasSenas;
    // End of variables declaration//GEN-END:variables
}
